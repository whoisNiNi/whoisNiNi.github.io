<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦到一只陈浩楠  Sister Li</title>
  
  
  <link href="http://whoispower.cn/atom.xml" rel="self"/>
  
  <link href="http://whoispower.cn/"/>
  <updated>2022-07-16T11:39:48.901Z</updated>
  <id>http://whoispower.cn/</id>
  
  <author>
    <name>Chenhaonan_o</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bootstrap</title>
    <link href="http://whoispower.cn/2022/07/16/Bootstrap/"/>
    <id>http://whoispower.cn/2022/07/16/Bootstrap/</id>
    <published>2022-07-16T07:54:34.000Z</published>
    <updated>2022-07-16T11:39:48.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bootstrap："><a href="#Bootstrap：" class="headerlink" title="Bootstrap："></a>Bootstrap：</h2><pre><code>1. 概念： 一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。    * 框架:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。    * 好处：        1. 定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。        2. 响应式布局。            * 同一套页面可以兼容不同分辨率的设备。2. 快速入门    1. 下载Bootstrap        // https://v3.bootcss.com/getting-started/#download    2. 在项目中将这三个文件夹复制        (css/fonts/js)    3. 创建html页面，引入必要的资源文件</code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Bootstrap HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Bootstrap --></span>          <span class="token comment">&lt;!-- 下载bootstrap后，从本地访问--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --></span>          <span class="token comment">&lt;!-- 下载bootstrap后，从本地访问--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-3.2.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --></span>          <span class="token comment">&lt;!-- 下载bootstrap后，从本地访问--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好，世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><pre><code>* 同一套页面可以兼容不同分辨率的设备。* 实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子* 步骤：    1. 定义容器。相当于之前的table、        * 容器分类：            1. container：两边留白            2. container-fluid：每一种设备都是100%宽度    2. 定义行。相当于之前的tr   样式：row    3. 定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目        * 设备代号：            1. xs：超小屏幕 手机 (&lt;768px)：col-xs-12            2. sm：小屏幕 平板 (≥768px)            3. md：中等屏幕 桌面显示器 (≥992px)            4. lg：大屏幕 大桌面显示器 (≥1200px)    * 注意：        1. 一行中如果格子数目超过12，则超出部分自动换行。        2. 栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。        3. 如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</code></pre><h2 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h2><pre><code>1. 全局CSS样式：    * 按钮：class=&quot;btn btn-default&quot;    * 图片：        *  class=&quot;img-responsive&quot;：图片在任意尺寸都占100%        *  图片形状            *  &lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-rounded&quot;&gt;：方形            *  &lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-circle&quot;&gt; ： 圆形            *  &lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-thumbnail&quot;&gt; ：相框    * 表格        * table        * table-bordered        * table-hover    * 表单        * 给表单项添加：class=&quot;form-control&quot; 2. 组件：    * 导航条    * 分页条3. 插件：    * 轮播图</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Bootstrap：&quot;&gt;&lt;a href=&quot;#Bootstrap：&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap：&quot;&gt;&lt;/a&gt;Bootstrap：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 概念： 一个前端开发的框架，Bootstrap，来自 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>English Word</title>
    <link href="http://whoispower.cn/2022/07/14/English-Word/"/>
    <id>http://whoispower.cn/2022/07/14/English-Word/</id>
    <published>2022-07-14T09:17:47.000Z</published>
    <updated>2022-07-15T09:52:53.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h1><h2 id="每日20个单词-day01"><a href="#每日20个单词-day01" class="headerlink" title="每日20个单词 day01"></a>每日20个单词 day01</h2><pre><code>1.abandon 放弃；离弃    The poor little puppy had been abandoned.    那可怜的小狗被人遗弃了。2.ability 能力；才能    He placed great reliance on his own ability.    他非常信赖他自己的本领。3.able    能够...的    We were able to look round comfortably.    我们可以自由自在地四处观光。4.abolish 废除    The quarantine is now abolished.    这项检疫措施现已取消。5.abrupt  突然的，意外的；言语粗鲁    Excuse me for my abrupt questions.    恕我冒昧提出这些问题。6.absence 缺席，离开    He was disgruntled at their absence .    他对他们的缺席不满。7.absent  缺席的，不在场的    He was never long absent from my side .    他从未长时间离开过我的身边。8.absolute 绝对的    Absolute perfection in a dictionary is rare .    绝对完美的词典是罕见的。9.absorb  吸收；使全神贯注，吸引(注意力)    She had been too absorbed in her happiness .    她完全沉浸在幸福之中了。  10.abstract 抽象的    Do n&#39;t speak in such abstract terms .    不要这样抽象地谈问题。    11.abundant 大量的；丰富的    Abundant precipitation is more important than extreme cold .    丰富的降雪量比酷寒更为重要。12.abuse   滥用    He came out with a stream of abuse .    他讲了一连串的污言秽语。    13.academic 学业的；教学的    He submitted his plans to the academic sciences .    他向科学院递交了他的计划。14.accept  接受；答应    Normally , i should accept her invitation .    按理我该接受她的邀请。15.acceptable 可接受的    He was unable to find an acceptable solution .    他却还未能找到一个可以接受的答案。16.access 入径；通道    Japan had easy access to our market .    日本很容易进入我们的市场。17.accident 交通事故；意外遭遇    The accident left a scar on her leg .    那次事故后她的腿上留下了伤疤。18.accompany 陪同；陪伴    She accompanied him from a sense of loyalty .    她出于忠诚而伴随他。19.accomplish 完成；实现    My object was accomplished in the visit .    我达到了这次访问的目的。20.accord 符合；一致    This seemed to accord with his desire .    这样似乎是合乎他的心愿的。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单词&quot;&gt;&lt;a href=&quot;#单词&quot; class=&quot;headerlink&quot; title=&quot;单词&quot;&gt;&lt;/a&gt;单词&lt;/h1&gt;&lt;h2 id=&quot;每日20个单词-day01&quot;&gt;&lt;a href=&quot;#每日20个单词-day01&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="English" scheme="http://whoispower.cn/categories/English/"/>
    
    
    <category term="Word" scheme="http://whoispower.cn/tags/Word/"/>
    
  </entry>
  
  <entry>
    <title>JavaAlgorithm</title>
    <link href="http://whoispower.cn/2022/07/12/JavaAlgorithm/"/>
    <id>http://whoispower.cn/2022/07/12/JavaAlgorithm/</id>
    <published>2022-07-12T04:39:21.000Z</published>
    <updated>2022-07-16T11:38:30.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="每日一个算法题目-基础"><a href="#每日一个算法题目-基础" class="headerlink" title="每日一个算法题目(基础)"></a>每日一个算法题目(基础)</h1><h2 id="Java-九九乘法表"><a href="#Java-九九乘法表" class="headerlink" title="Java 九九乘法表"></a>Java 九九乘法表</h2><h3 id="表1"><a href="#表1" class="headerlink" title="表1"></a>表1</h3><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>乘法表1</span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> o <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> o <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>o<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>o<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>i<span class="token operator">*</span>o<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p size=20>效果图</p><p><img src="/img/Javaimgs/chengfabiao1.png"></p><h3 id="表2"><a href="#表2" class="headerlink" title="表2"></a>表2</h3><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>乘法表2</span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> o <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> o <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>o<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>o<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>i<span class="token operator">*</span>o<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/Javaimgs/chengfabiao2.png"></p><h2 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h2><pre><code>打印水仙花数（3位水仙花、100-999之内的所有水仙花、三位及以上水仙花）水仙花数是指一个3位数，它的每个位上的数字的3次幂之和等于它本身，eg:</code></pre><p>$$1^3·5^3·3^3&#x3D;153$$</p><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>水仙花数</span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"100-999之内的所有水仙花数:\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> g <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> s <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//100-999之内的所有水仙花数:153370371407</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><pre><code>pow()     方法用于返回第一个参数的第二个参数次方。语法double pow(double base, double exponent)参数    base -- 任何原生数据类型。    exponent -- 任何原生数据类型。返回值    返回第一个参数的第二个参数次方。</code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><pre><code>对（31, 42,21,50,12,60,81,74,101,93）进行排序（考点: java基础）。程序分析:可以利用选择法，即从后9个比较过程中，选择一个最小的与第一个元素交换，下次类推，即用第二个元素与后8个进行比较，并进行交换。</code></pre><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>排序A</span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  arrays <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t <span class="token operator">=</span> arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> arrays<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断:若是最后一位，则不用加大于号</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>arrays<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">">"</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 101>93>81>74>60>50>42>31>21>12 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>方法二</code></pre><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>排序B</span></div><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断:若是最后一位，则不用加大于号</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"&lt;"</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 31&lt;31&lt;31&lt;42&lt;50&lt;60&lt;74&lt;81&lt;93&lt;101 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/img/Javaimgs/yuansfanzhuan.png"></p><p>点我一起看视频教程叭~<a href="https://www.youtube.com/watch?v=WCM8__X34W0&list=PLD3Xyx6ef38yAdTNXD7ntDlaarf8NEoZ4&index=95">视频教程</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;每日一个算法题目-基础&quot;&gt;&lt;a href=&quot;#每日一个算法题目-基础&quot; class=&quot;headerlink&quot; title=&quot;每日一个算法题目(基础)&quot;&gt;&lt;/a&gt;每日一个算法题目(基础)&lt;/h1&gt;&lt;h2 id=&quot;Java-九九乘法表&quot;&gt;&lt;a href=&quot;#Java-</summary>
      
    
    
    
    <category term="Java algorithm" scheme="http://whoispower.cn/categories/Java-algorithm/"/>
    
    
    <category term="Java" scheme="http://whoispower.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>XML note</title>
    <link href="http://whoispower.cn/2022/07/07/XML-note/"/>
    <id>http://whoispower.cn/2022/07/07/XML-note/</id>
    <published>2022-07-07T03:56:20.000Z</published>
    <updated>2022-07-16T14:51:45.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><pre><code>XML 指可扩展标记语言（eXtensible Markup Language）。XML 被设计用来传输和存储数据，不用于表现和展示数据，HTML 则用来表现数据。XML文档如果以 XML 声明开始表述了文档的一些信息&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></pre><h1 id="XML-文档例子"><a href="#XML-文档例子" class="headerlink" title="XML 文档例子"></a>XML 文档例子</h1><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;site&gt;&lt;name&gt;NiNi&lt;/name&gt;&lt;url&gt;https://whoispower.cn&lt;/url&gt;&lt;logo&gt;NiNi-logo.png&lt;/logo&gt;&lt;desc&gt;NiNi Blog&lt;/desc&gt;&lt;/site&gt;</code></pre><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre><code>基本语法：    1. xml文档的后缀名 .xml    2. xml第一行必须定义为文档声明    3. xml文档中有且仅有一个根标签    4. 属性值必须使用引号(单双都可)引起来    5. 标签必须正确关闭    6. xml标签名称区分大小写</code></pre><h1 id="组成部分："><a href="#组成部分：" class="headerlink" title="组成部分："></a>组成部分：</h1><h2 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h2><pre><code>    1. 格式：&lt;?xml 属性列表 ?&gt;    2. 属性列表：        version：版本号，必须的属性        encoding：编码方式。告知解析引擎当前文档使用的集，默认值：ISO-8859-1, GBK可存中文。        standalone：是否独立            取值：                yes：不依赖其他文件                no：依赖其他文件</code></pre><h2 id="指令-了解"><a href="#指令-了解" class="headerlink" title="指令(了解)"></a>指令(了解)</h2><pre><code>结合css的    &lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;    &lt;user&gt;        &lt;name&gt;NiNi&lt;/name&gt;        &lt;url&gt;https://whoispower.cn&lt;/url&gt;        &lt;logo&gt;NiNi-logo.png&lt;/logo&gt;        &lt;desc&gt;NiNi Blog&lt;/desc&gt;    &lt;/user&gt;创建一个a.cssname&#123;    color:red;&#125;</code></pre><h2 id="标签-自定义"><a href="#标签-自定义" class="headerlink" title="标签(自定义)"></a>标签(自定义)</h2><pre><code>规则：    名称可以包含字母、数字以及其他的字符     名称不能以数字或者标点符号开始     名称不能以字母 xml（或者 XML、Xml 等等）开始     名称不能包含空格     注释：&lt;!--注释内容--&gt;</code></pre><h2 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h2><pre><code>id属性值唯一</code></pre><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><pre><code>if(a &amp;lt; b &amp;amp;&amp;am; a &amp;gt; c)if (a &lt; b &amp;&amp; a &gt; c )这样太麻烦了，更简便的方法是:    CDATA区：在该区域中的数据会被原样展示    格式：      &lt;![CDATA[ 数据 ]]&gt;</code></pre><h1 id="约束：规定xml文档的书写规则"><a href="#约束：规定xml文档的书写规则" class="headerlink" title="约束：规定xml文档的书写规则"></a>约束：规定xml文档的书写规则</h1><pre><code>作为框架的使用者(程序员)：    1. 能够在xml中引入约束文档    2. 能够简单的读懂约束文档</code></pre><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><pre><code>一种简单的约束技术引入dtd文档到xml文档中    内部dtd：将约束规则定义在xml文档中    外部dtd：将约束的规则定义在外部的dtd文件中        本地：&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;        网络：&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;例子：本地引入DTD文件student.dtd    &lt;!ELEMENT students (student*) &gt; //可以有多个student或0次    &lt;!ELEMENT student (name,age,sex)&gt;//仅有一个name,age,sex    &lt;!ELEMENT name (#PCDATA)&gt;//写字符串    &lt;!ELEMENT age (#PCDATA)&gt;//写字符串    &lt;!ELEMENT sex (#PCDATA)&gt;//写字符串    &lt;!ATTLIST student number ID #REQUIRED&gt;//id是唯一的XML文件student.xml    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;    &lt;!DOCTYPE students SYSTEM &quot;student.dtd&quot;&gt;&lt;!-- 本地 --&gt;&lt;students&gt;    &lt;student number=&quot;001&quot;&gt;        &lt;name&gt;tom&lt;/name&gt;        &lt;age&gt;18&lt;/age&gt;        &lt;sex&gt;male&lt;/sex&gt;    &lt;/student&gt;&lt;/students&gt;</code></pre><h3 id="Schema-复杂"><a href="#Schema-复杂" class="headerlink" title="Schema(复杂)"></a>Schema(复杂)</h3><pre><code>引入：    1.填写xml文档的根元素    2.引入xsi前缀.  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    3.引入xsd文件命名空间.  xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;    4.为每一个xsd约束声明一个前缀,作为标识          xmlns=&quot;http://www.itcast.cn/xml&quot;     &lt;students   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://www.itcast.cn/xml&quot;    xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;&gt;例子    student.xsd文件    &lt;?xml version=&quot;1.0&quot;?&gt;    &lt;xsd:schema xmlns=&quot;http://www.itcast.cn/xml&quot;    xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;    targetNamespace=&quot;http://www.itcast.cn/xml&quot;     elementFormDefault=&quot;qualified&quot;&gt;&lt;xsd:element name=&quot;students&quot; type=&quot;studentsType&quot;/&gt;&lt;xsd:complexType name=&quot;studentsType&quot;&gt;    &lt;xsd:sequence&gt;        &lt;xsd:element name=&quot;student&quot; type=&quot;studentType&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;/&gt;    &lt;/xsd:sequence&gt;&lt;/xsd:complexType&gt;&lt;xsd:complexType name=&quot;studentType&quot;&gt;    &lt;xsd:sequence&gt;        &lt;xsd:element name=&quot;name&quot; type=&quot;xsd:string&quot;/&gt;        &lt;xsd:element name=&quot;age&quot; type=&quot;ageType&quot; /&gt;        &lt;xsd:element name=&quot;sex&quot; type=&quot;sexType&quot; /&gt;    &lt;/xsd:sequence&gt;    &lt;xsd:attribute name=&quot;number&quot; type=&quot;numberType&quot; use=&quot;required&quot;/&gt;&lt;/xsd:complexType&gt;&lt;xsd:simpleType name=&quot;sexType&quot;&gt;    &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;        &lt;xsd:enumeration value=&quot;male&quot;/&gt;        &lt;xsd:enumeration value=&quot;female&quot;/&gt;    &lt;/xsd:restriction&gt;&lt;/xsd:simpleType&gt;&lt;xsd:simpleType name=&quot;ageType&quot;&gt;    &lt;xsd:restriction base=&quot;xsd:integer&quot;&gt;        &lt;xsd:minInclusive value=&quot;0&quot;/&gt;        &lt;xsd:maxInclusive value=&quot;256&quot;/&gt;    &lt;/xsd:restriction&gt;&lt;/xsd:simpleType&gt;&lt;xsd:simpleType name=&quot;numberType&quot;&gt;    &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;        &lt;xsd:pattern value=&quot;heima_\d&#123;4&#125;&quot;/&gt;    &lt;/xsd:restriction&gt;&lt;/xsd:simpleType&gt;&lt;/xsd:schema&gt; student.xml文件    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!--     1.填写xml文档的根元素    2.引入xsi前缀.  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    3.引入xsd文件命名空间.  xsi:schemaLocation=&quot;http://whoispower.cn/xml  student.xsd&quot;    4.为每一个xsd约束声明一个前缀,作为标识  xmlns=&quot;http://whoispower.cn/xml&quot; --&gt;&lt;students  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:a=&quot;http://whoispower.cn/xml&quot; xsi:schemaLocation=&quot;http://whoispower.cn/xml  student1.xsd&quot;&gt; &lt;student number=&quot;heima_0001&quot;&gt;     &lt;a.name&gt;tom&lt;/name&gt;     &lt;age&gt;18&lt;/age&gt;     &lt;sex&gt;male&lt;/sex&gt; &lt;/student&gt;&lt;/students&gt;</code></pre><h1 id="解析：操作xml文档，将文档中的数据读取到内存中"><a href="#解析：操作xml文档，将文档中的数据读取到内存中" class="headerlink" title="解析：操作xml文档，将文档中的数据读取到内存中"></a>解析：操作xml文档，将文档中的数据读取到内存中</h1><pre><code>    * 操作xml文档        1. 解析(读取)：将文档中的数据读取到内存中        2. 写入：将内存中的数据保存到xml文档中。持久化的存储    * 解析xml的方式：        1. DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树            * 优点：操作方便，可以对文档进行CRUD的所有操作            * 缺点：占内存        2. SAX：逐行读取，基于事件驱动的。            * 优点：不占内存。            * 缺点：只能读取，不能增删改        * xml常见的解析器：        1. JAXP：sun公司提供的解析器，支持dom和sax两种思想        2. DOM4J：一款非常优秀的解析器        3. Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。        4. PULL：Android操作系统内置的解析器，sax方式的。    * Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。        * 快速入门：            * 步骤：                1. 导入jar包                2. 获取Document对象                3. 获取对应的标签Element对象                4. 获取数据        * 代码：             //2.1获取student.xml的path            String path = JsoupDemo1.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();            //2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document            Document document = Jsoup.parse(new File(path), &quot;utf-8&quot;);            //3.获取元素对象 Element            Elements elements = document.getElementsByTag(&quot;name&quot;);                System.out.println(elements.size());            //3.1获取第一个name的Element对象            Element element = elements.get(0);            //3.2获取数据            String name = element.text();            System.out.println(name);    * 对象的使用：        1. Jsoup：工具类，可以解析html或xml文档，返回Document            * parse：解析html或xml文档，返回Document                * parse​(File in, String charsetName)：解析xml或html文件的。                * parse​(String html)：解析xml或html字符串                * parse​(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象        2. Document：文档对象。代表内存中的dom树            * 获取Element对象                * getElementById​(String id)：根据id属性值获取唯一的element对象                * getElementsByTag​(String tagName)：根据标签名称获取元素对象集合                * getElementsByAttribute​(String key)：根据属性名称获取元素对象集合                * getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合        3. Elements：元素Element对象的集合。可以当做 ArrayList&lt;Element&gt;来使用        4. Element：元素对象            1. 获取子元素对象                * getElementById​(String id)：根据id属性值获取唯一的element对象                * getElementsByTag​(String tagName)：根据标签名称获取元素对象集合                * getElementsByAttribute​(String key)：根据属性名称获取元素对象集合                * getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合            2. 获取属性值                * String attr(String key)：根据属性名称获取属性值            3. 获取文本内容                * String text():获取文本内容                * String html():获取标签体的所有内容(包括字标签的字符串内容)        5. Node：节点对象            * 是Document和Element的父类            * 快捷查询方式：        1. selector:选择器            * 使用的方法：Elementsselect​(String cssQuery)                * 语法：参考Selector类中定义的语法        2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言            * 使用Jsoup的Xpath需要额外导入jar包。            * 查询w3cshool参考手册，使用xpath的语法完成查询            * 代码：                //1.获取student.xml的path                String path = JsoupDemo6.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();                //2.获取Document对象                Document document = Jsoup.parse(new File(path), &quot;utf-8&quot;);                        //3.根据document对象，创建JXDocument对象                JXDocument jxDocument = new JXDocument(document);                        //4.结合xpath语法查询                //4.1查询所有student标签                List&lt;JXNode&gt; jxNodes = jxDocument.selN(&quot;//student&quot;);                for (JXNode jxNode : jxNodes) &#123;                    System.out.println(jxNode);                &#125;                        System.out.println(&quot;--------------------&quot;);                        //4.2查询所有student标签下的name标签                List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(&quot;//student/name&quot;);                for (JXNode jxNode : jxNodes2) &#123;                    System.out.println(jxNode);                &#125;                        System.out.println(&quot;--------------------&quot;);                        //4.3查询student标签下带有id属性的name标签                List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(&quot;//student/name[@id]&quot;);                for (JXNode jxNode : jxNodes3) &#123;                    System.out.println(jxNode);                &#125;                System.out.println(&quot;--------------------&quot;);                //4.4查询student标签下带有id属性的name标签 并且id属性值为itcast                        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(&quot;//student/name[@id=&#39;itcast&#39;]&quot;);                for (JXNode jxNode : jxNodes4) &#123;                    System.out.println(jxNode);                &#125;</code></pre>]]></content>
    
    
    <summary type="html">XML 指可扩展标记语言（eXtensible Markup Language）。 XML 被设计用来传输和存储数据，不用于表现和展示数据，HTML 则用来表现数据。</summary>
    
    
    
    <category term="JavaWeb" scheme="http://whoispower.cn/categories/JavaWeb/"/>
    
    
    <category term="XML" scheme="http://whoispower.cn/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Mysql_note</title>
    <link href="http://whoispower.cn/2022/07/07/Mysql-note/"/>
    <id>http://whoispower.cn/2022/07/07/Mysql-note/</id>
    <published>2022-07-06T17:31:05.000Z</published>
    <updated>2022-07-15T04:13:45.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><pre><code>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</code></pre><h2 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法:"></a>通用语法:</h2><pre><code>1.MYSQL英文: Structured Query Language     简称 SQL2.MySQL数据库的SQL语句不分大小写，关键字建议用大写3.注释    - 单行注释: -- 注释内容 或 #注释内容(mysql特有)    - 多行注释: /*注释*/2.0分类:    1.DDL(Data Dafinition Language)数据定义语言，        用来定义数据库对象: 数据库，表，列等    2.DML(Data Mainpulation Language)数据库操作语言，        用来对数据库中表的数据进行增删改    3.DQL(Data Query Language)数据查询语言，        用来查询数据库中表的记录(数据)    4.DCL(Data Control Language)数据控制语言，        用来定义数据库的访问权限和安全级别，及创建用户</code></pre><h2 id="1-DDL"><a href="#1-DDL" class="headerlink" title="1.DDL"></a>1.DDL</h2><pre><code>DDL(操作数据库)    查询: SHOW DATABASES     创建:         CREATE DATABASE 数据库名称;        CREATE DATABASE IF NOT EXISTS 数据库名称;(判断，如果不存在则创建)    删除:         DROP DATABASE 数据库名称;        DROP DATABASE IF EXISTS 数据库名称;(判断，如果存在则删除)    使用数据库        查看当前的数据库: SELECT DATABASE();        视同数据库: USE 数据库名称;</code></pre><h2 id="2-DML"><a href="#2-DML" class="headerlink" title="2.DML"></a>2.DML</h2><pre><code>    DML(操作表)</code></pre><h3 id="创建-Create"><a href="#创建-Create" class="headerlink" title="创建(Create)"></a>创建(Create)</h3><pre><code>CREATE TABLE 表明称(        字段名1 数据类型1,        字段名n 数据类型n,    );例子:    CREATE TABLE tb_user(        id int ,        username varchar(20),        password varchar(32)        );数据类型:https://www.runoob.com/mysql/mysql-data-types.html数据类型的使用方式：    age int;score double(总长度,小数点后保留的分数)0-100 2 scoredouble2);    brithday date;    char和varchar的区别: 分别存储&quot;张三&quot;这个姓名    name char(10) 占用十个字符空间，剩下的用空格填补--定长    varchar char(10) 占用两个字符 (性能高)--边长        案例.            create table student(            id int,            name varchar(10),            gender char(1),            brithday date,            score double(5,2),            emailAddress varchar(64),            tell varchar(15),            status tinyint            );</code></pre><h3 id="查询-Retrieve"><a href="#查询-Retrieve" class="headerlink" title="查询(Retrieve)"></a>查询(Retrieve)</h3><pre><code>查看当前的数据库下所有表名称:SHOW TABLES;查询表结构: DESC 表名称;</code></pre><h3 id="修改-Update"><a href="#修改-Update" class="headerlink" title="修改(Update)"></a>修改(Update)</h3><pre><code>修改表名:    ALTER TABLE 表名 RENAME TO 新的表名;添加一列:    ALTER TABLE 表名 ADD 列名 数据类型;修改数据类型:     ALTER TABLE 表名 MODIFY 列名 新数据类型;修改列名和数据类型    ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型;删除列     ALTER TABLE 表名 DROP 列名;</code></pre><h3 id="删除-Delete"><a href="#删除-Delete" class="headerlink" title="删除(Delete)"></a>删除(Delete)</h3><pre><code>DROP TABLE 表名称;DROP TABLE IF EXISTS 表名字;</code></pre><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="添加表数据"><a href="#添加表数据" class="headerlink" title="添加表数据"></a>添加表数据</h2><pre><code>1.给指定列添加数据    INSERT INTO 表名 (列名1,列名2,..) VALUES(值1,值2,..)2.给全部列添加数据    INSERT INTO 表名 VALUES(值1,值2,..)3.批量添加数据    INSERT INTO 表名 (列名1,列名2,..) VALUES(值1,值2,..)(值1,值2,..)(值1,值..)..;    INSERT INTO 表名 VALUES(值1,值2,..)(值1,值2,..)(值1,值2,..)..;案例：    添加数据        查询所有数据            SELECT * FROM std;        给指定列添加数据 insert into表名(列名1,列名2,..) values(值1,值2,);            insert INTO std (id,`name`) values(1,&quot;张飞&quot;);        给所有列添加数据            insert into std (id,`name`,sex,brithday,score,emailAddrestell,`status`,Hobby) VALUES(2,&#39;李四&#39;,&#39;男&#39;,&#39;199-11-10&#39;,88.8&#39;chn@gmail.com&#39;,&#39;13578945612&#39;,&#39;1&#39;,&#39;打篮球&#39;);        给所有列添加数据(简化方式)            insert into std VALUES(2,&#39;李四&#39;,&#39;男&#39;,&#39;199-11-10&#39;,88.8&#39;chn@gmail.com&#39;,&#39;13578945612&#39;,&#39;1&#39;,&#39;打篮球&#39;);        批量添加            INSERT INTO std             (id,`name`,sex,brithday,score,emailAddress,tell,`status`,Hobby)            VALUES            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; );        批量添加(简化方式)            INSERT INTO std            VALUES            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; ),            ( 2, &#39;李四&#39;, &#39;男&#39;, &#39;199-11-10&#39;, 88.88, &#39;chn@gmail.com&#39;&#39;13578945612&#39;, &#39;1&#39;, &#39;打篮球&#39; );</code></pre><h2 id="修改表数据"><a href="#修改表数据" class="headerlink" title="修改表数据"></a>修改表数据</h2><pre><code>修改表数据语法    UPDATE 表名 SET 列名1 = 值1, 【WHERE 条件】;    【注意】 修改语句中如果不加条件，则将所有数据都修改！例子:    将张飞的性别改为女        UPDATE std set sex = &#39;女&#39; WHERE `name` = &quot;张飞&quot;;    将张三的生日改为 199-12-12，分数改为99.99        UPDATE std set brithday=&#39;1999-12-12&#39;,score=&#39;99.99&#39; wher`name`=&#39;张飞&#39;;</code></pre><h2 id="删除表数据"><a href="#删除表数据" class="headerlink" title="删除表数据"></a>删除表数据</h2><pre><code>    1.删除数据        DELETE FROM 表名 【where 条件】        【注意】 删除语句中如果不加条件，则将所有数据都删除！    例子:        删除hello记录            DELETE FROM std WHERE name = &#39;hello&#39;;        不加条件将所有数据删除            DELETE FROM std ;</code></pre><h1 id="查询-进阶"><a href="#查询-进阶" class="headerlink" title="查询(进阶)"></a>查询(进阶)</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre><code>    SELECT         字段列表    FROM        表名列表    WHERE        条件列表    GROUP BY        分组字段    HAVING        分组后条件            ORDER BY        排序字段    LIMIT        分页限定</code></pre><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><h3 id="查询多个字段"><a href="#查询多个字段" class="headerlink" title="查询多个字段"></a>查询多个字段</h3><pre><code>    SELECT 字段列表 FROM 表名;    SELECT * FROM 表名;    举例:        创建 stu 表            CREATE table stu(            id int ,-- 编号            name VARCHAR(20),-- 姓名            age int,-- 年龄            sex VARCHAR(5),-- 性别            address VARCHAR(100), -- 地址            math double(5,2), -- 数学成绩            english double(5,2), -- 英语成绩            hire_date date -- 入学时间            );    查询表结构    DESC stu;    添加数据    INSERT INTO stu (id,`name`,age,sex,address,math,english,hire_date)            VALUES                (2,&#39;刘备&#39;,&#39;55&#39;,&#39;男&#39;,&#39;香港&#39;,&#39;56.23&#39;,&#39;15.86&#39;,&#39;1999-07-17&#39;),                (3,&#39;张飞&#39;,&#39;35&#39;,&#39;男&#39;,&#39;香港&#39;,&#39;15.63&#39;,&#39;56.34&#39;,&#39;1999-06-16&#39;),                (4,&#39;瑶妹&#39;,&#39;25&#39;,&#39;女&#39;,&#39;澳门&#39;,&#39;45.23&#39;,&#39;46.62&#39;,&#39;1999-05-16&#39;),                (5,&#39;貂蝉&#39;,&#39;15&#39;,&#39;女&#39;,&#39;台湾&#39;,&#39;86.23&#39;,&#39;94.23&#39;,&#39;1999-04-15&#39;),                (6,&#39;吕布&#39;,&#39;30&#39;,&#39;男&#39;,&#39;广东&#39;,&#39;15.45&#39;,&#39;84.12&#39;,&#39;1999-03-14&#39;),                (7,&#39;项羽&#39;,&#39;42&#39;,&#39;男&#39;,&#39;海南&#39;,&#39;78.62&#39;,&#39;15.10&#39;,&#39;1999-02-13&#39;),                (8,&#39;妲己&#39;,&#39;20&#39;,&#39;女&#39;,&#39;贵州&#39;,&#39;64.23&#39;,&#39;51.37&#39;,&#39;1999-01-12&#39;);            查询表数据                SELECT * FROM STU;            查询 name and age 两列                SELECT `name`,age FROM stu;            查询所有列的数据，列明的列表可以用*代替(不推荐)                SELECT id,`name`,age,sex,address,math,english,hire_date FROMstu;【推荐】                SELECT * FROM stu;【不推荐】            查询地址信息                    SELECT address FROM stu;</code></pre><h3 id="去除重复记录"><a href="#去除重复记录" class="headerlink" title="去除重复记录"></a>去除重复记录</h3><pre><code>    SELECT DISTINCT 字段列表 FROM 表名;    2.0举例        -- 去除重复记录            SELECT DISTINCT address FROM stu;</code></pre><h3 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h3><pre><code>    AS : AS 也可以省略    -- 查询姓名，数学，英语成绩并且用as(可以省略【记得隔一个空格的距离别名(更加利于阅读表格)        SELECT `name`,math as 数学成绩,english as 英语成绩 FROM stu;</code></pre><h2 id="条件查询-where"><a href="#条件查询-where" class="headerlink" title="条件查询(where)"></a>条件查询(where)</h2><pre><code>(1)条件查询语法    SELECT 字段列表 FROM 表名 WHERE 条件列表 ;    等于 =    不等于 ！= 或者 &lt;&gt;    在某个范围内都包含  BETWEEN ..AND..    多选一  IN(...)    模糊查询_单个任意字符 %多个任意字符 LINK 占位符号    是NULL  IS NULL    不是NULL  IS NOT NULL    并且 AND 或者 &amp;&amp;    或者 OR 或者 ||    非,不是 NOT 或者 !    举例:        -- 1.查询年龄大于20的学员信息            USE hei;            SELECT * FROM stu WHERE age &gt; 20;        -- 2.查询年龄大于等于20并且年龄小于等于40岁的学员信息            SELECT * FROM stu WHERE age &gt;= 20 &amp;&amp; age &lt;= 40;            SELECT * FROM stu WHERE age &gt;= 20 AND age &lt;= 40;            SELECT * FROM stu WHERE age BETWEEN 20 AND 40;        -- 3.查询入学时期在&#39;1999-04-01&#39;到&#39;1999-09-01&#39;的学员信息            SELECT * FROM stu WHERE hire_date BETWEEN &#39;1999-04-01&#39; AN&#39;1999-09-01&#39;;         -- 4.查询年龄等于15岁的学员信息            SELECT * FROM stu WHERE age = 15;        -- 5.查询年龄不等于15的学员信息            SELECT * FROM stu WHERE age != 15;            SELECT * FROM stu WHERE age &lt;&gt; 15;        -- 6.查询年龄等于15 或者 25 或者35 的学员信息            SELECT * FROM stu WHERE age = 15 || age = 25 || age = 35;            SELECT * FROM stu WHERE age = 15 or age = 25 or age = 35;            SELECT * FROM stu WHERE age in(15,25,35);        -- 7. 查询英语成绩为NULL的学员信息        -- 【注意】NULL 值的比较不能使用=  ！=  需要使用 IS IS NOT             SELECT * FROM stu WHERE english IS NULL;        -- 查询英语成绩不为NULL的学员信息            SELECT * FROM stu WHERE english IS NOT NULL;        -- 8.模糊查询             /*通配符：                (1)_代表单个任意字符                (2)%代表多个任意字符            */            例子:                -- 查询姓&#39;张&#39;的成员信息                    SELECT * FROM stu WHERE `name` like &#39;张%&#39;;                 -- 查询第二个字为‘备’的成员信息                    SELECT * FROM stu WHERE `name` like &#39;_备%&#39;;                -- 查询名字中包含‘妲’的成员信息                    SELECT * FROM stu WHERE `name` like &#39;%妲%&#39;;</code></pre><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><pre><code>    (1)排序查询语法        SELECT 字段列表 FROM 表名 ORDER BY 排序字段名1 [排序方式1], 排序字2[排序方式2]..;    (2)排序方式         * ASC : 升序排列(默认值)        * DESC : 降序排列    【注意】如果有多个排序条件，当前面的条件值一样时候，才会根据第二条进行排序    例子:        -- 1.查询学生信息，按照年龄升序排序            SELECT id,`name`,age FROM stu ORDER BY age ASC;            SELECT * FROM ORDER BY age ASC;            SELECT * FROM ORDER BY age;  -- ASC是默认值，可以省略        -- 2.查询学生信息，按照数学成绩降序排序            SELECT id,`name`,math FROM stu ORDER BY math DESC;            SELECT * FROM stu ORDER BY math DESC;         -- 3.查询学生信息，按照数学成绩降序排列，如果成绩一样，再按照英语成绩升序排列                    SELECT * FROM stu ORDER BY math DESC,english ASC; </code></pre><h2 id="分组查询-group-by"><a href="#分组查询-group-by" class="headerlink" title="分组查询(group by)"></a>分组查询(group by)</h2><pre><code>聚合函数    1.概念: 将一列作为一个整体进行纵向计算    2.聚合函数分类:    求平均值AVG([distinct] expr)    统计行的数量COUNT(&#123;*|[distinct] &#125; expr)        1.主键        2.*    求最大值MAX([distinct] expr)    求最小值MIN([distinct] expr)    求累加和SUM([distinct] expr)                        聚合函数语法:        SELECT 聚合函数名(列名) FROM 表;        【注意】 null值不参与所有聚合函数运算            例子:        -- 1.统计班级一共有多少个学生            SELECT COUNT(id) FROM stu;-- count 统计的列名不能为null            SELECT * FROM stu;        -- 2.查询数学成绩最高分            SELECT MAX(math) FROM stu;        -- 3. 查询数学成绩的最低分            SELECT MIN(math) FROM stu;        -- 4.查询数学成绩的总分            ELECT SUM(math) FROM stu;        -- 5.查询数学成绩的平均分            SELECT AVG(math) FROM stu;     1.分组查询的语法        SELECT 字段列表 FROM 表名 【WHERE 分组前条件限定】 GROUP BY 分组字段名 【WHERE 分组后条件过滤】;    【注意】 分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义        where 和 having 区别            * 执行时机不一样: where是分组之前进行限定，不满足where条件，                则不参与分组,而having是分组之后对结果进行过滤            * 可判断条件不一样: where 不能对聚合函数进行判断，having可以.    【执行顺序】where &gt; 聚合函数 &gt; having        例子:            -- 1.查询男同学和女同学各自的数学平均分                SELECT sex,AVG(math) FROM stu GROUP BY sex;            -- 2.查询男同学和女同学各自的数学平均分，以及各自人数                SELECT sex,AVG(math),COUNT(*) FROM stu GROUP BY sex;            -- 3.查询男同学和女同学各自的数学平均分，以及各自人数,要求分数低于70不进行分组                SELECT sex,AVG(math),COUNT(*) FROM stu WHERE math &gt; 70 GROUP BY sex;            -- 4.查询男同学和女同学各自的数学平均分，以及各自人数,要求分数低于70不进行分组,分组之后分数大于2个的。                SELECT sex,AVG(math),COUNT(*) FROM stu WHERE math &gt; 70 GROUP BY sex HAVING COUNT(*)&gt;2 ;</code></pre><h2 id="分页查询-LIMIT"><a href="#分页查询-LIMIT" class="headerlink" title="分页查询(LIMIT)"></a>分页查询(LIMIT)</h2><pre><code>分页查询基本语法    SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询条目数;* 起始索引: 从0开始【计算公式】: 起始索引 = (当前页码-1) * 每页显示的条数tips:    * 分页查询LIMIT是mysql数据库的方言    * Oracle 分页查询使用 rownumber    * SQL Server分页查询使用top例子:    -- 1.从0开始查询，查询三条数据        * FROM stu LIMIT 0,3;     -- 2.每页显示三条数据，查询第一页数据        SELECT * FROM stu LIMIT 0,3;     -- 3.每页显示三条数据，查询第二页数据        SELECT * FROM stu LIMIT 3,3;     -- 4.每页显示三条数据，查询第三页数据        SELECT * FROM stu LIMIT 6,3; </code></pre><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><pre><code>* 概念&amp;分类    约束是作用于表中列上的规则，用于限制加入表的数据    约束的存在保证了数据库中数据的正确性，有效性，完整性约束名称描述* 非空约束保证列中所有数据不能有NULL值NOT NULL * 唯一约束保证列中所有数据各不相同UNIQUE  * 主键约束主键是一行数据的唯一标识，要求非空且唯一PRIMARY KEY* 默认约束保证列中的值满足某一条件CHECK * 检查约束保存数据时，未指定值则采用默认值DEFAULT* 外键约束外键用来让两个数据之间的建立链接，保证数据的一致性和完整FOREIGN KEYTips : MYSQL不支持检查约束案例:    根据需求为表添加合适的约束-- 员工表    CREATE TABLE emp (    id INT PRIMARY KEY auto_increment, -- 员工id,主键且自增长    ename varchar(50) NOT NULL UNIQUE, -- 员工姓名,非空且唯一    joindate DATE NOT NULL, -- 入职日期,非空约束    salary DOUBLE(7,2) NOT NULL,-- 工资,非空约束    bonus DOUBLE(7,2) DEFAULT 0 -- 奖金，如果没奖金默认为0    );-- 查询表数据    SELECT * FROM emp;-- 添加数据    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(1,&#39;张三&#39;,&#39;1999-11-11&#39;,8890,5000);    SELECT * FROM emp;</code></pre><h2 id="演示主键约束-非空且唯一"><a href="#演示主键约束-非空且唯一" class="headerlink" title="演示主键约束,非空且唯一"></a>演示主键约束,非空且唯一</h2><pre><code>-- 非空    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(NULL,&#39;张三&#39;,&#39;1999-11-11&#39;,8890,5000);-- 唯一    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(1,&#39;张三&#39;,&#39;1999-11-11&#39;,8890,5000);    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(2,&#39;李四&#39;,&#39;1999-11-11&#39;,8890,5000);-- 演示非空约束    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(3,NULL,&#39;1999-11-11&#39;,8890,5000);-- 演示唯一约束    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(3,&#39;李四&#39;,&#39;1999-11-11&#39;,8890,5000);-- 默认约束    INSERT INTO emp (id,ename,joindate,salary) VALUES(3,&#39;王五&#39;,&#39;1999-11-11&#39;,8890);-- 演示 auto_increment-- 先删除旧的emp    DROP TABLE IF EXISTS emp;-- 添加一个新的emp    CREATE TABLE emp (    id INT PRIMARY KEY auto_increment, -- 员工id,主键且自增长    ename varchar(50) NOT NULL UNIQUE, -- 员工姓名,非空且唯一    joindate DATE NOT NULL, -- 入职日期,非空    salary DOUBLE(7,2) NOT NULL,-- 工资,非空    bonus DOUBLE(7,2) DEFAULT 0 -- 奖金，如果没奖金默认为0    );-- 添加两个数据    INSERT INTO emp (ename,joindate,salary,bonus) VALUES(&#39;李四&#39;1999-11-11&#39;,8890,5000);    INSERT INTO emp (id,ename,joindate,salary,bonus) VALUES(NULL,&#39;李五&#39;1999-11-11&#39;,8890,5000);    SELECT * FROM emp;</code></pre><h2 id="非空约束语法"><a href="#非空约束语法" class="headerlink" title="非空约束语法"></a>非空约束语法</h2><pre><code>    添加约束    -- 创建表时添加约束    CREATE TABLE 表名(        列名 数据类型 NOT NULL,        ..        );    -- 创建完成后添加非空约束                ALTER TABLE 表名 MODIFY 字段名 数据类型 NOT NULL;            删除约束                ALTER TABLE 表名 MODIFY 字段名 数据类型;</code></pre><h2 id="唯一约束语法"><a href="#唯一约束语法" class="headerlink" title="唯一约束语法"></a>唯一约束语法</h2><pre><code>添加约束    -- 创建表时添加约束    CREATE TABLE 表名(        列名 数据类型 UNIQUE [AUTO_INCREMENT],        -- AUTO_INCREMENT : 当不指定值时自动增长        ..        );    CREATE TABLE 表名(        列名 数据类型,        ..        [CONSTRAINT][约束名称] UNIQUE(列名)        );    -- 创建完成后添加非空约束        ALTER TABLE 表名 MODIFY 字段名 数据类型 UNIQUE;        删除约束        ALTER TABLE 表名 DROP INDEX 字段名;</code></pre><h2 id="主键约束语法"><a href="#主键约束语法" class="headerlink" title="主键约束语法"></a>主键约束语法</h2><pre><code>    添加约束        -- 创建表时添加约束        CREATE TABLE 表名(            列名 数据类型 PRIMARY KEY [AUTO_INCREMENT],            -- AUTO_INCREMENT : 当不指定值时自动增长            ..            );        CREATE TABLE 表名(            列名 数据类型,            ..            [CONSTRAINT][约束名称] PRIMARY(列名)            );        -- 创建完成后添加非空约束        ALTER TABLE 表名 ADD PRIMARY KEY;            删除约束                ALTER TABLE 表名 DROP PRIMARY KEY;            SELECT * FROM emp;</code></pre><h2 id="默认约束语法"><a href="#默认约束语法" class="headerlink" title="默认约束语法"></a>默认约束语法</h2><pre><code>添加约束    -- 创建表时添加约束    CREATE TABLE 表名(        列名 数据类型 DEFAULT 默认值,        ..        );    -- 创建完成后添加非空约束    ALTER TABLE 表名 ALTER 列名 SET DEFAULT;删除约    ALTER TABLE 表名 ALTER 列名 DROP DEFAULT;</code></pre><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><pre><code>    添加约束        -- 创建表时添加约束        CREATE TABLE 表名(            列名 数据类型,            ..            [CONSTRAINT] [外键名称] FOREIGN KEY (外键列名) REFERENCES 主表(主表列名)            );        -- 创建完成后添加非空约束        ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字称) REFERENCES 主表名称(主列表名称);        删除            ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;        举例:        -- 部门表(主表)            CREATE TABLE dept(            id int PRIMARY KEY auto_increment,            dep_name VARCHAR(20),            addr VARCHAR(20)            );        -- 员工表(从表)            CREATE TABLE emp(                id int PRIMARY KEY auto_increment,                emp_name varchar(20),                age int,                dep_id int,                -- 添加外键 dp_id关联主表dept中id                CONSTRAINT fk_emp_dept FOREIGN KEY(dep_id) REFERENCES dept(id)                );        -- 添加部门数据            INSERT INTO dept (dep_name,addr) VALUES            (&#39;研发部&#39;,&#39;广州&#39;),(&#39;销售部&#39;,&#39;深圳&#39;);        -- 添加员工数据            INSERT INTO emp (emp_name,age,dep_id) VALUES            (&#39;张三&#39;,20,1),            (&#39;李四&#39;,20,1),            (&#39;王五&#39;,20,1),            (&#39;赵六&#39;,20,2),            (&#39;孙七&#39;,22,2),            (&#39;周八&#39;,18,2);        -- 删除外键            ALTER TABLE emp DROP FOREIGN KEY fk_emp_dept;        -- 创建完成之后添加外键            ALTER TABLE emp ADD CONSTRAINT fk_emp_dept FOREIGN KEY(dep_id)REFERENCES dept(id); </code></pre><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="表关系之一对多"><a href="#表关系之一对多" class="headerlink" title="表关系之一对多"></a>表关系之一对多</h2><pre><code>    * 如:部门和员工表，一个员工对应一个部门，一个部门对应多个员工。    * 实现方式:在多的一方建立外键，指向一的一方的主键。    * 外键约束例子。</code></pre><h2 id="表关系之多对多"><a href="#表关系之多对多" class="headerlink" title="表关系之多对多"></a>表关系之多对多</h2><pre><code>    * 如: 订单 和 商品    * 一个商品对应多个订单，一个订单对应多个商品    * 实现方式:建立第三张中间表，中间表至少包含两个外键，分别关联两方的主键。    * 例子.        -- 订单表            CREATE TABLE tb_order(            id int PRIMARY KEY auto_increment,            payment DOUBLE(10,2),            payment_type TINYINT,            status TINYINT            );        -- 商品表            CREATE TABLE tb_goods(            id int PRIMARY KEY auto_increment,            title VARCHAR(100),            price DOUBLE(10,2)            );        -- 订单商品中间表            CREATE TABLE tb_order_goods(            id int PRIMARY KEY auto_increment,            order_id int,            goods_id int,            count int            );        -- 建完表之后添加外键            -- ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主列表名称);            ALTER TABLE tb_order_goods ADD CONSTRAINT fk_order_iFOREIGN KEY (order_id) REFERENCES tb_order(id);            ALTER TABLE tb_order_goods ADD CONSTRAINT fk_goods_iFOREIGN KEY (goods_id) REFERENCES tb_goods(id);</code></pre><h2 id="表关系之一对一"><a href="#表关系之一对一" class="headerlink" title="表关系之一对一"></a>表关系之一对一</h2><pre><code>* 如: 用户和用户详情* 一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常字段放另一张表，用于提升查询性能。* 实现方式: 在任意一方加入外键，关联另一方主键，并且设置外键为唯一(UNIQUE)</code></pre><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><pre><code>例如:    -- 部门表(主表)        CREATE TABLE dept(        did int PRIMARY KEY auto_increment,        dname VARCHAR(20)        );    -- 员工表(从表)        CREATE TABLE emp(        id int PRIMARY KEY auto_increment,        NAME varchar(10),        gender CHAR(1), -- 性别        salary DOUBLE, -- 工资        join_date DATE, -- 入职日期        dep_id INT,    -- 添加外键 dp_id关联主表dept中id        FOREIGN KEY(dep_id) REFERENCES dept(did)        );    -- 添加部门数据        INSERT INTO dept (dname) VALUES        (&#39;研发部&#39;),        (&#39;市场部&#39;),        (&#39;财务部&#39;),        (&#39;销售部&#39;);    -- 添加员工数据        INSERT INTO emp (`NAME`,gender,salary,join_date,dep_id) VALUES        (&#39;孙悟空&#39;,&#39;男&#39;,7200,&#39;2013-02-24&#39;,1),        (&#39;猪八戒&#39;,&#39;男&#39;,3600,&#39;2010-12-02&#39;,2),        (&#39;唐曾&#39;,&#39;男&#39;,9000,&#39;2008-08-08&#39;,2),        (&#39;白骨精&#39;,&#39;女&#39;,5000,&#39;2015-10-07&#39;,3),        (&#39;蜘蛛精&#39;,&#39;女&#39;,4500,&#39;2011-03-14&#39;,1),        (&#39;小白龙&#39;,&#39;男&#39;,2500,&#39;2011-02-14&#39;,NULL);        -- 查询emp 和 dept 的数据，emp.dep_id = dept_did         SELECT * FROM emp,dept WHERE emp.dep_id = dept.did; -- 内连笛卡尔积 : 取A,B两个集合 取A,B所有的组合情况    多表查询: 从多张表查询数据</code></pre><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><pre><code>内连接: 相当于查询AB的交集数据-- 隐式内连接    SELECT 字段列表 FROM 表1,表2..WHERE 条件;-- 给表起别名    SELECT t1.`NAME`,t1.gender,t2.dname FROM emp t1,dept t2 WHERE t1.dep_id = t2.did ;-- 显示内连接    SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 条件;    SELECT * FROM emp inner join dept on emp.dep_id = dept.did;--  外连接:     左外连接: 相当于查询A表所有数据和交集部分数据    SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件;    -- 查询emp表的所有数据和对应的员工信息        SELECT * FROM emp LEFT JOIN dept ON emp.dep_id dept.did;    右外连接: 相当于查询B表所有数据和交集部分数据        SELECT 字段列表 FROM 表1 right [OUTER] JOIN 表2 ON 件;    -- 查询dept表的所有数据和对应的员工信息            SELECT * FROM emp RIGHT JOIN dept ON emp.dep_id =dept.did;</code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><pre><code>1.子查询概念    查询中嵌套查询，称嵌套查询为子查询2.子查询根据查询结果不同，作用不同:    单行单列: 作为条件值，使用= != &lt; &gt;等进行条件判断        SELECT 字段列表 FROM 表 WHERE 字段名 = (子查询);    -- 查询猪八戒的工资        SELECT `NAME`,salary FROM emp WHERE `NAME` = &#39;猪八戒&#39;;    -- 查询工资高于猪八戒的员工信息        SELECT `NAME`,salary FROM emp WHERE salary &gt; 3600;        SELECT *FROM emp WHERE salary &gt; (SELECT salary FROemp WHERE `NAME` = &#39;猪八戒&#39;);    --  多行单列: 作为条件值，使用in等关键字进行条件判断        SELECT 字段列表 FROM 表 WHERE 字段名 in(子查询);    -- 查询‘财务部’，‘市场部’所有员工信息        SELECT did FROM dept where dname = &#39;财务部&#39; or dnam=  &#39;市场部&#39;; -- 等于2or3        SELECT * FROM emp WHERE dep_id in (2,3);        SELECT * FROM emp WHERE dep_id in (SELECT did FROdept where dname = &#39;财务部&#39; or dname =  &#39;市场部&#39;);                                多行多列: 作为虚拟表。        SELECT 字段列表 FROM (子查询) WHERE 条件;    查询入职日期是‘2011-11-11’之后的员工信息和部门信息        SELECT * FROM emp WHERE join_date &gt; &#39;2011-11-11&#39;;        SELECT * FROM (SELECT * FROM emp WHERE join_da&gt; &#39;2011-11-11&#39;) t1,dept WHERE t1.dep_id = dedid;</code></pre><h2 id="多表查询案例"><a href="#多表查询案例" class="headerlink" title="多表查询案例"></a>多表查询案例</h2><pre><code>DROP TABLEIFEXISTS emp;DROP TABLEIFEXISTS dept;DROP TABLEIFEXISTS job;DROP TABLEIFEXISTS salarygrade;-- 部门表    CREATE TABLE dept ( id INT PRIMARY KEY PRIMARY KEY, -门id    dname VARCHAR ( 50 ), -- 部门名称    loc VARCHAR ( 50 ) -- 部门所在地    );-- 职务表，职务名称，职务    CREATE TABLE job ( id INT PRIMARY KEY, jname VARCHAR ( 20 ), description VARCHAR ( 50 ) );    -- 员工表    CREATE TABLE emp (    id INT PRIMARY KEY,-- 员工id    ename VARCHAR ( 50 ),-- 员工姓名    job_id INT,-- 职务id    mgr INT,-- 上级领导    joindate DATE,-- 入职日期    salary DECIMAL ( 7, 2 ),-- 工资    bonus DECIMAL ( 7, 2 ),-- 奖金    dept_id INT,-- 所在部门编号    CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEYjob_idREFERENCES job ( id ),    CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEYdept_idREFERENCES dept ( id )     );        -- 工资等级表    CREATE TABLE salarygrade ( grade INT PRIMARY KEY, -- 级别    losalary INT, -- 最低工资    hisalary INT -- 最高工资    );-- 添加4个部门    INSERT INTO dept ( id, dname, loc )    VALUES        ( 10, &#39;教研部&#39;, &#39;北京&#39; ),        ( 20, &#39;学工部&#39;, &#39;上海&#39; ),        ( 30, &#39;销售部&#39;, &#39;广州&#39; ),        ( 40, &#39;财务部&#39;, &#39;深圳&#39; );-- 添加4个职务    INSERT INTO job ( id, jname, description )    VALUES    ( 1, &#39;董事长&#39;, &#39;管理整个公司，接单&#39; ),    ( 2, &#39;经理&#39;, &#39;管理部门员工&#39; ),    ( 3, &#39;销售员&#39;, &#39;向客人推销产品&#39; ),    ( 4, &#39;文员&#39;, &#39;使用办公软件&#39; );-- 添加员工                        INSERT INTO emp ( id, ename, job_id, mgr, joindatesalary, bonus, dept_id )    VALUES    ( 1001, &#39;孙悟空&#39;, 4, 1004, &#39;2000-12-17&#39;, &#39;8000.00&#39;, NULL, 20 ),    ( 1002, &#39;卢俊义&#39;, 3, 1006, &#39;2001-02-20&#39;, &#39;16000.00&#39;, &#39;3000.00&#39;, 30 ),    ( 1003, &#39;林冲&#39;, 3, 1006, &#39;2001-02-22&#39;, &#39;12500.00&#39;, &#39;5000.00&#39;, 30 ),    ( 1004, &#39;唐僧&#39;, 2, 1009, &#39;2001-04-02&#39;, &#39;29750.00&#39;, NULL, 20 ),    ( 1005, &#39;李逵&#39;, 4, 1006, &#39;2001-09-28&#39;, &#39;12500.00&#39;, &#39;14000.00&#39;, 30 ),    ( 1006, &#39;宋江&#39;, 2, 1009, &#39;2001-05-01&#39;, &#39;28500.00&#39;, NULL, 30 ),    ( 1007, &#39;刘备&#39;, 2, 1009, &#39;2001-09-01&#39;, &#39;24500.00&#39;, NULL, 10 ),    ( 1008, &#39;猪八戒&#39;, 4, 1004, &#39;2007-04-19&#39;, &#39;30000.00&#39;, NULL, 20 ),    ( 1009, &#39;罗贯中&#39;, 1, NULL, &#39;2001-11-17&#39;, &#39;50000.00&#39;, NULL, 10 ),    ( 1010, &#39;吴用&#39;, 3, 1006, &#39;2001-09-08&#39;, &#39;15000.00&#39;, &#39;0.00&#39;, 30 ),    ( 1011, &#39;沙僧&#39;, 4, 1004, &#39;2007-05-23&#39;, &#39;11000.00&#39;, NULL, 20 ),    ( 1012, &#39;李逵&#39;, 4, 1006, &#39;2001-12-03&#39;, &#39;9500.00&#39;, NULL, 30 ),    ( 1013, &#39;小白龙&#39;, 4, 1004, &#39;2001-12-03&#39;, &#39;30000.00&#39;, NULL, 20 ),    ( 1014, &#39;关羽&#39;, 4, 1007, &#39;2002-01-23&#39;, &#39;13000.00&#39;, NULL, 10 );                        -- 添加5个工资等级        INSERT INTO salarygrade ( grade, losalary, hisalary )        VALUES        ( 1, 7000, 12000 ),        ( 2, 12010, 14000 ),        ( 3, 14010, 20000 ),        ( 4, 20010, 30000 ),        ( 5, 30010, 99990 );    -- 1.查询所有员工信息。查询员工号，员工姓名，工资，职务名称，职务描述    -- 隐式内连接        SELECT            emp.id,            emp.ename,            emp.salary,            job.jname,            job.description         FROM            emp,            job         WHERE            emp.job_id = job.id;        SELECT        *         FROM            emp;        SELECT        *         FROM        job;            -- 显示内连接        SELECT            emp.id,            emp.ename,            emp.salary,            job.jname,            job.description             FROM                emp                INNER JOIN job ON emp.job_id = job.id;                    -- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置        -- 隐式内连接            SELECT                emp.id,                emp.ename,                emp.salary,                job.jname,                job.description,                dept.dname,                dept.loc                 FROM                emp,                job,                dept                 WHERE                emp.job_id = job.id                 AND dept.id = emp.dept_id;        -- 显示内连接            SELECT                emp.id,                emp.ename,                emp.salary,                job.jname,                job.description,                dept.dname,                dept.loc             FROM                emp                INNER JOIN job ON emp.job_id = job.id                INNER JOIN dept ON emp.dept_id = dept.id;        -- 3.查询员工姓名，工资，工资等级                SELECT                    emp.ename,                    emp.salary,                    t2.*                 FROM                    emp,                    salarygrade t2                 WHERE                    emp.salary &gt;= t2.losalary                     AND emp.salary &lt;= t2.hisalary;        -- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级            SELECT                emp.id,                emp.ename,                emp.salary,                job.jname,                job.description,                dept.dname,                dept.loc,                t2.grade             FROM                emp,                job,                dept,                salarygrade t2             WHERE                emp.salary &gt;= t2.losalary                 AND emp.salary &lt;= t2.hisalary                 AND emp.job_id = job.id                 AND emp.dept_id = dept.id;                -- 5.查询出部门编号、部门名称、部门位置、部门人数            SELECT dept_id,COUNT(*) FROM emp GROUP BY dept_id;            SELECT * FROM dept, (SELECT dept_id, COUNT(*) FROM emp GROUP BY dept_id) t1 WHERE t1.dept_id =dept.id;</code></pre><h1 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h1><pre><code>DROP TABLE IF EXISTS account;-- 创建账户表    CREATE TABLE account(    id int PRIMARY KEY auto_increment,    name varchar(10),    money double(10,2)    );-- 添加数据    INSERT INTO account(name,money) values(&#39;张三&#39;,1000),(&#39;李四&#39;,1000);    UPDATE account set money = 1000;    select * from account;-- 开启事务    BEGIN;-- 转账操作-- 1. 查询李四账户金额是否大于500-- 2. 李四账户 -500UPDATE account set money = money - 500 where name = &#39;李四&#39;;-- 出现异常了...-- 3. 张三账户 +500UPDATE account set money = money + 500 where name = &#39;张三&#39;;-- 提交事务COMMIT;-- 回滚事务ROLLBACK; -- 查看事务的默认提交方式SELECT @@autocommit;-- 1 自动提交  0 手动提交-- 修改事务提交方式set @@autocommit = 0;</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->]]></content>
    
    
    <summary type="html">MySQL 是最流行的关系型数据库管理系统</summary>
    
    
    
    <category term="SQL" scheme="http://whoispower.cn/categories/SQL/"/>
    
    
    <category term="Mysql" scheme="http://whoispower.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux_Vim</title>
    <link href="http://whoispower.cn/2022/07/05/Linux-Vim/"/>
    <id>http://whoispower.cn/2022/07/05/Linux-Vim/</id>
    <published>2022-07-04T22:58:46.000Z</published>
    <updated>2022-07-15T04:13:35.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre><code>    Linux Vim 是从 vi 发展出来的一个文本编辑器。    代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。    简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。    vim 则可以说是程序开发者的一项很好用的工具。连 vim 的官方网站:www.vim.org/    自己也说 vim 是一个程序开发工具而不是文字处理软件。</code></pre><hr></hr><pre><code>vi/vim 的使用    基本上 vi/vim 共分为三种模式，分别是    命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 </code></pre><hr></hr><pre><code>以下是常用的几个命令：        i 切换到输入模式，以输入字符。        x 删除当前光标所在处的字符。        : 切换到底线命令模式，以在最底一行输入命令。        若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。        命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</code></pre><hr></hr><pre><code>    输入模式        在命令模式下按下i就进入了输入模式。        在输入模式中，可以使用以下按键：            字符按键以及Shift组合，输入字符            ENTER，回车键，换行            BACK SPACE，退格键，删除光标前一个字符            DEL，删除键，删除光标后一个字符            方向键，在文本中移动光标            HOME/END，移动光标到行首/行尾            Page Up/Page Down，上/下翻页            Insert，切换光标为输入/替换模式，光标将变成竖线/下划线            ESC，退出输入模式，切换到命令模式    底线命令模式            在命令模式下按下:（英文冒号）就进入底线命令模式。            底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。            在底线命令模式中，基本的命令有（已经省略了冒号）：                q 退出程序                w 保存文件                按ESC键可随时退出底线命令模式。            简单的说，我们可以将这三个模式想成底下的图标来表示：</code></pre><hr></hr><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><pre><code>vi/vim 使用实例使用 vi/vim 进入一般模式如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：    vim Hello.txt直接输入 vi 文件名 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</code></pre><hr></hr><pre><code>* 按下 i 进入输入模式(也称为编辑模式)，开始编辑文字    在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！    在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。        这个时候，键盘上除了     Esc 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。 </code></pre><hr></hr><pre><code>按下 ESC 按钮回到一般模式好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 Esc 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！在一般模式中按下 :wq 储存后离开 viOK，我们要存档了，存盘并离开的指令很简单，输入 :wq 即可保存离开！OK! 这样我们就成功创建了一个 Hello.txt 的文件。</code></pre><h2 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h2><p><img src="/img/Linuximgs/2022-07-05-07-28-12.png"></p><hr></hr><p><img src="/img/Linuximgs/2022-07-05-07-26-30.png"></p><hr></hr><p><img src="/img/Linuximgs/2022-07-05-07-26-59.png"></p><hr></hr><h2 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h2><p><img src="/img/Linuximgs/2022-07-05-07-29-12.png"></p><hr></hr><h2 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h2><p><img src="/img/Linuximgs/2022-07-05-07-30-18.png"></p><pre><code>    *   特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。    *   举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->    ]]></content>
    
    
    <summary type="html">Linux Vim 是从 vi 发展出来的一个文本编辑器。 代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</summary>
    
    
    
    <category term="Linux" scheme="http://whoispower.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://whoispower.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JDBC_tool_Class</title>
    <link href="http://whoispower.cn/2022/07/05/JDBC_tool_Class/"/>
    <id>http://whoispower.cn/2022/07/05/JDBC_tool_Class/</id>
    <published>2022-07-04T21:01:20.000Z</published>
    <updated>2022-07-15T04:13:25.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><pre><code>* 目的：简化书写</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><pre><code>* 分析：    1. 注册驱动也抽取    2. 抽取一个方法获取连接对象        * 需求：不想传递参数（麻烦），还得保证工具类的通用性。        * 解决：配置文件            jdbc.properties                url=                user=                password=    3. 抽取一个方法释放资源</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code>    public class JDBCUtils &#123;    private static String url;    private static String user;    private static String password;    private static String driver;    /**     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块     */    static&#123;        //读取资源文件，获取值。        try &#123;            //1. 创建Properties集合类。            Properties pro = new Properties();            //获取src路径下的文件的方式---&gt;ClassLoader 类加载器            ClassLoader classLoader = JDBCUtils.class.getClassLoader();            URL res  = classLoader.getResource(&quot;jdbc.properties&quot;);            String path = res.getPath();            System.out.println(path);            ///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties            //2. 加载文件           // pro.load           (new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));            pro.load(new FileReader(path));            //3. 获取数据，赋值            url = pro.getProperty(&quot;url&quot;);            user = pro.getProperty(&quot;user&quot;);            password = pro.getProperty(&quot;password&quot;);            driver = pro.getProperty(&quot;driver&quot;);            //4. 注册驱动            Class.forName(driver);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;    &#125;    /**     * 获取连接     * @return 连接对象     */    public static Connection getConnection() throws SQLException &#123;        return DriverManager.getConnection(url, user, password);    &#125;    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(Statement stmt,Connection conn)&#123;        if( stmt != null)&#123;            try &#123;                stmt.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;        if( conn != null)&#123;            try &#123;                conn.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(ResultSet rs,Statement stmt, Connection conn)&#123;        if( rs != null)&#123;            try &#123;                rs.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;        if( stmt != null)&#123;            try &#123;                stmt.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;        if( conn != null)&#123;            try &#123;                conn.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre><code>    * 需求：        1. 通过键盘录入用户名和密码        2. 判断用户是否登录成功            * select * from user where username = &quot;&quot; and password = &quot;&quot;;            * 如果这个sql有查询结果，则成功，反之，则失败    * 步骤：        1. 创建数据库表 user            CREATE TABLE USER(                id INT PRIMARY KEY AUTO_INCREMENT,                username VARCHAR(32),                PASSWORD VARCHAR(32)                        );            INSERT INTO USER VALUES(NULL,&#39;zhangsan&#39;,&#39;123&#39;);            INSERT INTO USER VALUES(NULL,&#39;lisi&#39;,&#39;234&#39;);</code></pre><h2 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h2><pre><code>        2. 代码实现：            public class JDBCDemo9 &#123;                public static void main(String[] args) &#123;                    //1.键盘录入，接受用户名和密码                    Scanner sc = new Scanner(System.in);                    System.out.println(&quot;请输入用户名：&quot;);                    String username = sc.nextLine();                    System.out.println(&quot;请输入密码：&quot;);                    String password = sc.nextLine();                    //2.调用方法                    boolean flag = new JDBCDemo9().login(username, password);                    //3.判断结果，输出不同语句                    if(flag)&#123;                        //登录成功                        System.out.println(&quot;登录成功！&quot;);                    &#125;else&#123;                        System.out.println(&quot;用户名或密码错误！&quot;);                    &#125;                &#125;                /**                 * 登录方法                 */                public boolean login(String username ,String password)&#123;                    if(username == null || password == null)&#123;                        return false;                    &#125;                    //连接数据库判断是否登录成功                    Connection conn = null;                    Statement stmt =  null;                    ResultSet rs = null;                    //1.获取连接                    try &#123;                        conn =  JDBCUtils.getConnection();                        //2.定义sql                        String sql = &quot;select * from user where username = &#39;&quot;+username+&quot;&#39; and password = &#39;&quot;+password+&quot;&#39; &quot;;                        //3.获取执行sql的对象                        stmt = conn.createStatement();                        //4.执行查询                        rs = stmt.executeQuery(sql);                        //5.判断                       /* if(rs.next())&#123;//如果有下一行，则返回true                            return true;                        &#125;else&#123;                            return false;                        &#125;*/                       return rs.next();//如果有下一行，则返回true                                &#125; catch (SQLException e) &#123;                        e.printStackTrace();                    &#125;finally &#123;                        JDBCUtils.close(rs,stmt,conn);                    &#125;                    return false;                &#125;            &#125;</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->]]></content>
    
    
    <summary type="html">抽取JDBC工具类 ： JDBCUtils  目的：简化书写</summary>
    
    
    
    <category term="JavaWeb" scheme="http://whoispower.cn/categories/JavaWeb/"/>
    
    
    <category term="java" scheme="http://whoispower.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring JDBCTemplate</title>
    <link href="http://whoispower.cn/2022/07/05/JDBC_SpringTemplate/"/>
    <id>http://whoispower.cn/2022/07/05/JDBC_SpringTemplate/</id>
    <published>2022-07-04T19:01:20.000Z</published>
    <updated>2022-07-15T04:13:04.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC-Spring"><a href="#JDBC-Spring" class="headerlink" title="JDBC Spring"></a>JDBC Spring</h2><pre><code>*   在使用普通的 JDBC 数据库时，就会很麻烦的写不必要的代码来处理异常，打开和关闭数据库连接等。 *Spring JDBC 框架负责所有的低层细节，从开始打开连 接，准备和执行 SQL 语句，处理异常，处理事务，到最后关闭连接。Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发* 步骤：    1. 导入jar包    2. 创建JdbcTemplate对象。依赖于数据源DataSource        * JdbcTemplate template = new JdbcTemplate(ds);    3. 调用JdbcTemplate的方法来完成CRUD的操作        * update():执行DML语句。增、删、改语句        * queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合            * 注意：这个方法查询的结果集长度只能是1        * queryForList():查询结果将结果集封装为list集合            * 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中        * query():查询结果，将结果封装为JavaBean对象            * query的参数：RowMapper                * 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装                * new BeanPropertyRowMapper&lt;类型&gt;(类型.class)        * queryForObject：查询结果，将结果封装为对象            * 一般用于聚合函数的查询</code></pre><h2 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h2><pre><code>* 需求：    1. 修改1号数据的 salary 为 10000    2. 添加一条记录    3. 删除刚才添加的记录    4. 查询id为1的记录，将其封装为Map集合    5. 查询所有记录，将其封装为List    6. 查询所有记录，将其封装为Emp对象的List集合    7. 查询总记录数* 代码：    import cn.itcast.domain.Emp;    import cn.itcast.utils.JDBCUtils;    import org.junit.Test;    import org.springframework.jdbc.core.BeanPropertyRowMapper;    import org.springframework.jdbc.core.JdbcTemplate;    import org.springframework.jdbc.core.RowMapper;                import java.sql.Date;    import java.sql.ResultSet;    import java.sql.SQLException;    import java.util.List;    import java.util.Map;                public class JdbcTemplateDemo2 &#123;    //Junit单元测试，可以让方法独立执行 //1. 获取JDBCTemplate对象    private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());</code></pre><h2 id="1-修改1号数据的-salary-为-10000"><a href="#1-修改1号数据的-salary-为-10000" class="headerlink" title="1. 修改1号数据的 salary 为 10000"></a>1. 修改1号数据的 salary 为 10000</h2><pre><code>                /**                 * 1. 修改1号数据的 salary 为 10000                 */                @Test                public void test1()&#123;                    //2. 定义sql                    String sql = &quot;update emp set salary = 10000 where id = 1001&quot;;                    //3. 执行sql                    int count = template.update(sql);                    System.out.println(count);                &#125;</code></pre><h2 id="2-添加一条记录"><a href="#2-添加一条记录" class="headerlink" title="2. 添加一条记录"></a>2. 添加一条记录</h2><pre><code>                /**                 * 2. 添加一条记录                 */                @Test                public void test2()&#123;                    String sql = &quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;;                    int count = template.update(sql, 1015, &quot;郭靖&quot;, 10);                    System.out.println(count);                &#125;</code></pre><h2 id="3-删除刚才添加的记录"><a href="#3-删除刚才添加的记录" class="headerlink" title="3.删除刚才添加的记录"></a>3.删除刚才添加的记录</h2><pre><code>                /**                 * 3.删除刚才添加的记录                 */                @Test                public void test3()&#123;                    String sql = &quot;delete from emp where id = ?&quot;;                    int count = template.update(sql, 1015);                    System.out.println(count);                &#125;</code></pre><h2 id="4-查询id为1001的记录，将其封装为Map集合"><a href="#4-查询id为1001的记录，将其封装为Map集合" class="headerlink" title="4.查询id为1001的记录，将其封装为Map集合"></a>4.查询id为1001的记录，将其封装为Map集合</h2><pre><code>                /**                 * 4.查询id为1001的记录，将其封装为Map集合                 * 注意：这个方法查询的结果集长度只能是1                 */                @Test                public void test4()&#123;                    String sql = &quot;select * from emp where id = ? or id = ?&quot;;                    Map&lt;String, Object&gt; map = template.queryForMap(sql, 1001,1002);                    System.out.println(map);                    //&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;                &#125;</code></pre><h2 id="5-查询所有记录，将其封装为List"><a href="#5-查询所有记录，将其封装为List" class="headerlink" title="5. 查询所有记录，将其封装为List"></a>5. 查询所有记录，将其封装为List</h2><pre><code>                /**                 * 5. 查询所有记录，将其封装为List                 */                @Test                public void test5()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);                                for (Map&lt;String, Object&gt; stringObjectMap : list) &#123;                        System.out.println(stringObjectMap);                    &#125;                &#125;</code></pre><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRU3ngt8iOEVABznAaCcaUAgdXI02hxE3Abcg&usqp=CAU"></p><h2 id="6-1-查询所有记录，将其封装为Emp对象的List集合"><a href="#6-1-查询所有记录，将其封装为Emp对象的List集合" class="headerlink" title="6.1 查询所有记录，将其封装为Emp对象的List集合"></a>6.1 查询所有记录，将其封装为Emp对象的List集合</h2><pre><code>                /**                 * 6.1 查询所有记录，将其封装为Emp对象的List集合                 */                @Test                public void test6()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Emp&gt; list = template.query(sql, new RowMapper&lt;Emp&gt;() &#123;                                    @Override                        public Emp mapRow(ResultSet rs, int i) throws SQLException &#123;                            Emp emp = new Emp();                            int id = rs.getInt(&quot;id&quot;);                            String ename = rs.getString(&quot;ename&quot;);                            int job_id = rs.getInt(&quot;job_id&quot;);                            int mgr = rs.getInt(&quot;mgr&quot;);                            Date joindate = rs.getDate(&quot;joindate&quot;);                            double salary = rs.getDouble(&quot;salary&quot;);                            double bonus = rs.getDouble(&quot;bonus&quot;);                            int dept_id = rs.getInt(&quot;dept_id&quot;);                                        emp.setId(id);                            emp.setEname(ename);                            emp.setJob_id(job_id);                            emp.setMgr(mgr);                            emp.setJoindate(joindate);                            emp.setSalary(salary);                            emp.setBonus(bonus);                            emp.setDept_id(dept_id);                                        return emp;                        &#125;                    &#125;);                    for (Emp emp : list) &#123;                        System.out.println(emp);                    &#125;                &#125;</code></pre><h2 id="6-2-查询所有记录，将其封装为Emp对象的List集合"><a href="#6-2-查询所有记录，将其封装为Emp对象的List集合" class="headerlink" title="6.2 查询所有记录，将其封装为Emp对象的List集合"></a>6.2 查询所有记录，将其封装为Emp对象的List集合</h2><pre><code>                /**                 * 6.2 查询所有记录，将其封装为Emp对象的List集合                 */                @Test                public void test6_2()&#123;                    String sql = &quot;select * from emp&quot;;                    List&lt;Emp&gt; list = template.query(sql, new BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));                    for (Emp emp : list) &#123;                        System.out.println(emp);                    &#125;                &#125;</code></pre><h2 id="7-查询总记录数"><a href="#7-查询总记录数" class="headerlink" title="7. 查询总记录数"></a>7. 查询总记录数</h2><pre><code>                 /**                 * 7. 查询总记录数                 */                @Test                public void test7()&#123;                    String sql = &quot;select count(id) from emp&quot;;                    Long total = template.queryForObject(sql, Long.class);                    System.out.println(total);                &#125;            &#125;</code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->]]></content>
    
    
    <summary type="html">Spring JDBC 框架负责所有的低层细节，从开始打开连 接，准备和执行 SQL 语句，处理异常，处理事务，到最后关闭连接。</summary>
    
    
    
    <category term="JavaWeb" scheme="http://whoispower.cn/categories/JavaWeb/"/>
    
    
    <category term="java" scheme="http://whoispower.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>English note Ⅱ</title>
    <link href="http://whoispower.cn/2022/07/01/English-Notes%202/"/>
    <id>http://whoispower.cn/2022/07/01/English-Notes%202/</id>
    <published>2022-07-01T02:10:10.000Z</published>
    <updated>2022-07-15T04:14:11.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h1><h2 id="形容词做表语"><a href="#形容词做表语" class="headerlink" title="形容词做表语"></a>形容词做表语</h2><pre><code>形容词可以用作表语，也即是位于各种系动词 (如 be, look, sound 等）之后.只作表语的形容词：    well，unwell，ill，faint，poorly，afraid，alone，alike，alive，    ashamed，asleep，awake，aware，certain，sure，due ，fond，ready，unable。如：He is great 中的 great或 He looks smart (他看起来很聪明。）中的 smart。表语形容词后可以加介词短语Many fruits are rich in vitamin. 许多水果富含维生素。Peter is afraid of Susan. 彼得害怕苏珊。表语形容词后可以加不定式He was anxious to see her. 他渴望见到她。They are really hard to deal with. 他们真的很难对付。表语形容词后还可以加宾语从句I&#39;m very happy that your health is showing signs of improvement. 看到你的健康状况有好转的迹象，我很高兴。</code></pre><h2 id="形容词做定语"><a href="#形容词做定语" class="headerlink" title="形容词做定语"></a>形容词做定语</h2><h3 id="前置定语"><a href="#前置定语" class="headerlink" title="前置定语"></a>前置定语</h3><pre><code>当形容词修饰名词作定语时，通常是放在被修饰名词之前。如：     there&#39;s good news tonight．今晚有好消息。     We&#39;re having a nice time ．我们正玩得开心。    当用作定语的形容词不止一个时，就得考虑它们的排列顺序问题。如何排序？大致原则如下:描绘形容词----&gt;大小（长短高低）形容词----&gt;形状形容词----&gt;年龄（新旧）形容词----&gt;颜色形容词----&gt;国籍形容词----&gt;材料形容词----&gt;用途（类别）形容词----&gt;名词 He bought a nice（好看的） small（小小的） round（圆形的） new（新的） brown（褐色的） French（法国产的） oak（橡木做的） writing desk（写字台） .</code></pre><h3 id="后置定语"><a href="#后置定语" class="headerlink" title="后置定语"></a>后置定语</h3><pre><code>形容词作后置定语在某些特殊情况下，形容词也可置于被修饰的词语后面作定语，我们称之为后置定语.如当一个形容词修饰 something , anything , everything , nothing , everyone , anybody 等复合不定代词时，形容词必须后置。    eg:        I&#39;d like something cheaper.        我想买点较为便宜的东西。         Is there anything good on TV tonight?        今晚电视有好节目吗？         Nobody decent will go there.        正派人不会到那里去的。        另外，若不是单个的形容词，而是一个形容词短语用作定语，则必须后置。如：     Is the room big enough for a party?     这个房间容得下一个晚会吗？     I think he is a man suitable for the job．    我认为他是适合做这项工作的人。</code></pre><h3 id="做宾语补足语"><a href="#做宾语补足语" class="headerlink" title="做宾语补足语"></a>做宾语补足语</h3><pre><code>find make keep (宾 + is + 形)否则是间宾人宾eg：what makes the cat so happy?    是什么让猫这么开心?You should keep your room clean.    你应该保持你的房间干净。I found the window broken.    我发现窗户破了。   </code></pre><h2 id="比较级最高级-规则"><a href="#比较级最高级-规则" class="headerlink" title="比较级最高级(规则)"></a>比较级最高级(规则)</h2><table><thead><tr><th align="center">比较级er</th><th align="center">long(长)</th><th align="center">longer</th><th align="center">longest</th></tr></thead><tbody><tr><td align="center">最高级est</td><td align="center">tall(高)</td><td align="center">taller</td><td align="center">tallest</td></tr><tr><td align="center">以e结尾+r或者+st</td><td align="center">nice(不错的)</td><td align="center">nicer</td><td align="center">nicest</td></tr><tr><td align="center">以e结尾+r或者+st</td><td align="center">large(大)</td><td align="center">larger</td><td align="center">largest</td></tr><tr><td align="center">以辅音字母+y</td><td align="center">busy(忙)</td><td align="center">busyier</td><td align="center">busiest</td></tr><tr><td align="center">以重读闭音节结尾的词末尾只有一个辅音字母,应双写再加er或者est</td><td align="center">big(大)</td><td align="center">bigger</td><td align="center">biggest</td></tr><tr><td align="center">辅+元+辅</td><td align="center">thin(薄)</td><td align="center">thinner</td><td align="center">thinnest</td></tr><tr><td align="center">多音节和多数双音节词在前面+more或者most</td><td align="center">useful(有用的)</td><td align="center">more useful</td><td align="center">most useful</td></tr></tbody></table><h2 id="比较级最高级-不规则"><a href="#比较级最高级-不规则" class="headerlink" title="比较级最高级(不规则)"></a>比较级最高级(不规则)</h2><table><thead><tr><th align="left">bad(坏)&#x2F;ill(病)&#x2F;badly(坏地)</th><th align="center">worse</th><th align="center">worst</th></tr></thead><tbody><tr><td align="left">many&#x2F;much(多)</td><td align="center">more</td><td align="center">most</td></tr><tr><td align="left">good&#x2F;well(好)</td><td align="center">brtter</td><td align="center">best</td></tr><tr><td align="left">little(较少的)</td><td align="center">less</td><td align="center">least</td></tr><tr><td align="left">old(老)</td><td align="center">older&#x2F;elder</td><td align="center">oldest&#x2F;eldest</td></tr><tr><td align="left">far(远的)</td><td align="center">farther</td><td align="center">farthest</td></tr><tr><td align="left">far(进一步的)</td><td align="center">further</td><td align="center">furthest</td></tr></tbody></table><h3 id="口诀"><a href="#口诀" class="headerlink" title="口诀"></a>口诀</h3><pre><code>特殊形式比较级，共有三对二和一，坏病两多和两好，little意思不是小，一分为二不是小，一是老来二是远。</code></pre><h2 id="interest用法"><a href="#interest用法" class="headerlink" title="interest用法"></a>interest用法</h2><pre><code>(1) interest为名 词，  意为“兴趣、利息、利益“，常作主语或宾语。    eg:  Jim has an interest in French art.            吉姆对法国艺术很感兴趣。(2) interest为动 词，  意为“使发生兴趣&quot;，做谓语。      eg:  That doesn&#39;t interest me in the slightest.            我一点也不感兴趣。interested : 表示某人自己本身感兴趣 做定语/表语interesting : 表示使人感兴趣 表 修饰人一般情况下：interesting 指物.interested 指人。be interested 之后可接 in doing sth 或 to do sth，含义稍有差别：接前者意为“对做某事感兴趣”，接后者意为“有兴趣地做某事”。interesting为形容词，意为“有趣的、有意思的，令人感兴趣的”，主语通常是物。</code></pre><h2 id="sick-amp-amp-ill"><a href="#sick-amp-amp-ill" class="headerlink" title="sick &amp;&amp; ill"></a>sick &amp;&amp; ill</h2><pre><code>ill 和sick都有&quot;生病的；ill 表示&quot;生病的；有病的&quot;这一意思时，一般用作表语，不能作定语；而sick 既可以作表语又可以作定语，如&quot;病人&quot;可以说a sick man 或the sick, 但不能说an ill man 或the ill。She is ill / sick in bed. 她卧病在床。She is looking after her sick father .她在照顾她生病的父亲。sick 有&quot;恶心的；厌倦的&quot;之意。    The smell makes me sick.    这气味使我感到恶心。ill 作定语修饰名词时是&quot;坏的；邪恶的&quot;之意。    He is an ill man.     他是一个邪恶的人。</code></pre><h2 id="too-much-amp-amp-much-too"><a href="#too-much-amp-amp-much-too" class="headerlink" title="too much &amp;&amp; much too"></a>too much &amp;&amp; much too</h2><pre><code>too much 太多。much too 非常。too much：much表示程度还可作“几乎，大致”解。much也可表示时间，意为“经常，时常”。much too：much用作副词主要表示“程度”，意为“非常，很，大大，更加,…如何”多修饰动词(可放于其前或其后)，也常修饰形容词或副词的比较级或最高级和分词。一般用于疑问句或否定句。too much：后接不可数名词。much too：后接形容词。</code></pre><h1 id="副词"><a href="#副词" class="headerlink" title="副词"></a>副词</h1><pre><code>1.副词修饰动词和形容词</code></pre><h2 id="形容词变副词"><a href="#形容词变副词" class="headerlink" title="形容词变副词"></a>形容词变副词</h2><pre><code>规则变化</code></pre><table><thead><tr><th align="left">变化规则</th><th align="center">形容词</th><th align="center">副词</th></tr></thead><tbody><tr><td align="left">在形容词词尾直接加y</td><td align="center">quick</td><td align="center">quickly</td></tr><tr><td align="left">以“y”结尾的形容词，把“y”变成“ily”</td><td align="center">happy</td><td align="center">happily</td></tr><tr><td align="left">以“able, ible, le”结尾的形容词，去掉“e”加“y”</td><td align="center">terrible(可怕的)</td><td align="center">terribly</td></tr><tr><td align="left">以“l”结尾的形容词，双写“l”加“y”，也即直接加“ly”</td><td align="center">beautiful</td><td align="center">beautifully</td></tr><tr><td align="left">以“ic”结尾的形容词，副词应该以“ally”结尾</td><td align="center">basic(基本的)</td><td align="center">besically</td></tr></tbody></table><pre><code>形副一体</code></pre><table><thead><tr><th align="left">形容词</th><th align="center">释义</th><th align="center">副词</th></tr></thead><tbody><tr><td align="left">fast</td><td align="center">快速的</td><td align="center">fast</td></tr><tr><td align="left">hard</td><td align="center">坚硬的</td><td align="center">hard</td></tr><tr><td align="left">early</td><td align="center">早期的</td><td align="center">early</td></tr><tr><td align="left">near</td><td align="center">近的</td><td align="center">near</td></tr><tr><td align="left">wrong</td><td align="center">错误的</td><td align="center">wrong</td></tr><tr><td align="left">high</td><td align="center">高的</td><td align="center">high</td></tr></tbody></table><h1 id="形容词副词比较级用法"><a href="#形容词副词比较级用法" class="headerlink" title="形容词副词比较级用法"></a>形容词副词比较级用法</h1><h2 id="原级"><a href="#原级" class="headerlink" title="原级"></a>原级</h2><pre><code>1.肯定as + 原级 + as ---------&gt;前后一致2.否定not + as/so 原级 + as ---------&gt;前不如后    Da Xiong is not as heavy as pang Hu    大熊不像庞虎那么重3.A + 倍数 + as + 原级 + as + B ---------&gt;A是B的几倍    This table is three times as long as that one.     这张桌子是那张桌子的三倍长。</code></pre><h2 id="比较级"><a href="#比较级" class="headerlink" title="比较级"></a>比较级</h2><pre><code>1.比较级 + than ---------&gt;比....更....2.比较级 + and + 比较级 ---------&gt;越来越3.the + 比较级 (主谓) the + 比较级 (主谓) ---------&gt;越....越...    The more he gets,the more he wants.      他得到的越多，他想要的就越多。4.the + 比较级 + of the two ---------&gt;两者中较...的一个5.倍数表示：A + 倍数 + 形容词比较级 + than + B    ---------&gt;A比B大(长,宽,高)多少倍    The pear is twice bigger than the strawberry.    这个梨比草莓大一倍。</code></pre><h2 id="最高级-副词的最高级the可以省略"><a href="#最高级-副词的最高级the可以省略" class="headerlink" title="最高级(副词的最高级the可以省略)"></a>最高级(副词的最高级the可以省略)</h2><pre><code>(副词最高级用于三者或三者以上的比较)1.the + 最高级 + 名词 + in/of/among..---------&gt;在..(范围内)最....2.one of + the + 最高级 + 名词(复数)---------&gt;最...的(谓语动词用单数)    Jane is one of the most popular singers in China.    简是中国最受欢迎的歌手之一。3.the + 序数词 + 最高级---------&gt;第几(长,宽,高)    the second largest,第二大</code></pre><h1 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h1><h2 id="动词分类"><a href="#动词分类" class="headerlink" title="动词分类"></a>动词分类</h2><p><img src="/img/Englishimgs/dongci.png"></p><pre><code>can &amp;&amp; could</code></pre><p><img src="/img/Englishimgs/qingtaidongci.png"></p><pre><code>may &amp;&amp; might</code></pre><p><img src="/img/Englishimgs/may.png"></p><pre><code>must &amp;&amp; have to &amp;&amp; need</code></pre><p><img src="/img/Englishimgs/must.png"></p><h2 id="动词规则变化表"><a href="#动词规则变化表" class="headerlink" title="动词规则变化表"></a>动词规则变化表</h2><table><thead><tr><th align="left">原型动词结尾情况</th><th align="center">现在时单三人称</th><th align="center">现在分词</th><th align="center">过去式和过去分词</th></tr></thead><tbody><tr><td align="left">一般情况</td><td align="center">+s</td><td align="center">+ing</td><td align="center">+ed</td></tr><tr><td align="left">s,x,ch,sh,o结尾</td><td align="center">+es</td><td align="center">+ing</td><td align="center">+ed</td></tr><tr><td align="left">辅音字母+y</td><td align="center">y-&gt;i,+es</td><td align="center">+ing</td><td align="center">y-&gt;i,+ed</td></tr><tr><td align="left">重读闭音节,一元一辅结尾</td><td align="center">+s</td><td align="center">双写辅音字母+ing</td><td align="center">双写辅音字母+ed</td></tr><tr><td align="left">不发言的e结尾</td><td align="center">+s</td><td align="center">去掉e,加ing</td><td align="center">+d</td></tr><tr><td align="left">ie结尾</td><td align="center">+s</td><td align="center">ie-&gt;y,+ing</td><td align="center">+d</td></tr></tbody></table><h2 id="动词不规则变化"><a href="#动词不规则变化" class="headerlink" title="动词不规则变化"></a>动词不规则变化</h2><pre><code>AAA类型</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">cost</td><td align="center">cost</td><td align="center">cost</td><td align="center">花费</td></tr><tr><td align="center">cut</td><td align="center">cut</td><td align="center">cut</td><td align="center">割,切</td></tr><tr><td align="center">hurt</td><td align="center">hurt</td><td align="center">hurt</td><td align="center">受伤</td></tr><tr><td align="center">hit</td><td align="center">hit</td><td align="center">hit</td><td align="center">打,撞</td></tr><tr><td align="center">let</td><td align="center">let</td><td align="center">let</td><td align="center">让</td></tr><tr><td align="center">put</td><td align="center">put</td><td align="center">put</td><td align="center">放下</td></tr><tr><td align="center">read</td><td align="center">read</td><td align="center">read</td><td align="center">读</td></tr><tr><td align="center">set</td><td align="center">set</td><td align="center">set</td><td align="center">安排</td></tr><tr><td align="center">spread</td><td align="center">spread</td><td align="center">spread</td><td align="center">展开,传播</td></tr><tr><td align="center">spit</td><td align="center">spit</td><td align="center">spit</td><td align="center">吐痰</td></tr><tr><td align="center">shut</td><td align="center">shut</td><td align="center">shut</td><td align="center">关上</td></tr></tbody></table><pre><code>AAB类型</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">beat</td><td align="center">beat</td><td align="center">beaten</td><td align="center">打败</td></tr></tbody></table><pre><code>ABA类型</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">become</td><td align="center">became</td><td align="center">become</td><td align="center">变</td></tr><tr><td align="center">come</td><td align="center">came</td><td align="center">come</td><td align="center">来</td></tr><tr><td align="center">run</td><td align="center">ran</td><td align="center">run</td><td align="center">跑</td></tr></tbody></table><pre><code>ABB(1) +t/ed</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">burn</td><td align="center">burnt</td><td align="center">burnt</td><td align="center">燃烧</td></tr><tr><td align="center">deal</td><td align="center">dealt</td><td align="center">dealt</td><td align="center">解决</td></tr><tr><td align="center">dream</td><td align="center">dreamed&#x2F;dreamt</td><td align="center">dreamed&#x2F;dreamt</td><td align="center">做梦</td></tr><tr><td align="center">hear</td><td align="center">heard</td><td align="center">heard</td><td align="center">听见</td></tr><tr><td align="center">hang</td><td align="center">hung</td><td align="center">hung</td><td align="center">悬挂</td></tr><tr><td align="center">hang</td><td align="center">hanged</td><td align="center">hanged</td><td align="center">绞死</td></tr><tr><td align="center">learn</td><td align="center">learned&#x2F;learnt</td><td align="center">learned&#x2F;learnt</td><td align="center">学习</td></tr><tr><td align="center">light</td><td align="center">lit&#x2F;lighted</td><td align="center">lit&#x2F;lighted</td><td align="center">点燃</td></tr><tr><td align="center">mean</td><td align="center">meant</td><td align="center">meant</td><td align="center">意思</td></tr><tr><td align="center">prove</td><td align="center">proved</td><td align="center">proven&#x2F;proved</td><td align="center">证明</td></tr><tr><td align="center">shine</td><td align="center">shined&#x2F;shone</td><td align="center">shined&#x2F;shined&#x2F;shone</td><td align="center">照耀</td></tr><tr><td align="center">show</td><td align="center">showed</td><td align="center">showed&#x2F;shown</td><td align="center">展示</td></tr><tr><td align="center">smell</td><td align="center">smelled&#x2F;smelt</td><td align="center">smelled&#x2F;smelt</td><td align="center">闻,嗅</td></tr><tr><td align="center">speed</td><td align="center">speeded&#x2F;sped</td><td align="center">speeded&#x2F;sped</td><td align="center">加速</td></tr><tr><td align="center">spell</td><td align="center">spelled&#x2F;spelt</td><td align="center">spelled&#x2F;spelt</td><td align="center">拼写</td></tr><tr><td align="center">wake</td><td align="center">waked&#x2F;woke</td><td align="center">waked&#x2F;woken</td><td align="center">醒来</td></tr></tbody></table><pre><code>(2)d--&gt;t</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">build</td><td align="center">built</td><td align="center">built</td><td align="center">建筑</td></tr><tr><td align="center">lend</td><td align="center">lent</td><td align="center">lent</td><td align="center">借给</td></tr><tr><td align="center">rebuild</td><td align="center">rebuilt</td><td align="center">rebuilt</td><td align="center">意思</td></tr><tr><td align="center">send</td><td align="center">sent</td><td align="center">sent</td><td align="center">送</td></tr><tr><td align="center">spend</td><td align="center">spent</td><td align="center">spent</td><td align="center">花费</td></tr></tbody></table><pre><code>(3)ought</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">bring</td><td align="center">brought</td><td align="center">brought</td><td align="center">带来</td></tr><tr><td align="center">buy</td><td align="center">bought</td><td align="center">bought</td><td align="center">买</td></tr><tr><td align="center">fight</td><td align="center">fought</td><td align="center">fought</td><td align="center">打架</td></tr><tr><td align="center">think</td><td align="center">thought</td><td align="center">thought</td><td align="center">思考,想</td></tr></tbody></table><pre><code>(4)aught</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">catch</td><td align="center">caught</td><td align="center">caught</td><td align="center">抓</td></tr><tr><td align="center">teach</td><td align="center">taught</td><td align="center">taught</td><td align="center">教</td></tr></tbody></table><pre><code>(5)i--&gt;u</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">dig</td><td align="center">dug</td><td align="center">dug</td><td align="center">挖掘</td></tr><tr><td align="center">feed</td><td align="center">fed</td><td align="center">fed</td><td align="center">喂</td></tr><tr><td align="center">find</td><td align="center">found</td><td align="center">found</td><td align="center">发现,找到</td></tr><tr><td align="center">get</td><td align="center">got</td><td align="center">got&#x2F;gotten</td><td align="center">得到</td></tr><tr><td align="center">hold</td><td align="center">held</td><td align="center">held</td><td align="center">握住</td></tr><tr><td align="center">lead</td><td align="center">led</td><td align="center">led</td><td align="center">带领</td></tr><tr><td align="center">meet</td><td align="center">met</td><td align="center">met</td><td align="center">遇见</td></tr><tr><td align="center">sit</td><td align="center">sat</td><td align="center">sat</td><td align="center">坐</td></tr><tr><td align="center">shoot</td><td align="center">shot</td><td align="center">shot</td><td align="center">射击</td></tr><tr><td align="center">stick</td><td align="center">stuck</td><td align="center">stuck</td><td align="center">粘住</td></tr><tr><td align="center">win</td><td align="center">won</td><td align="center">won</td><td align="center">赢</td></tr></tbody></table><pre><code>(6)it/pt/ft</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">feel</td><td align="center">felt</td><td align="center">felt</td><td align="center">感到</td></tr><tr><td align="center">keep</td><td align="center">kept</td><td align="center">kept</td><td align="center">保持</td></tr><tr><td align="center">leave</td><td align="center">left</td><td align="center">left</td><td align="center">离开</td></tr><tr><td align="center">sleep</td><td align="center">slept</td><td align="center">slept</td><td align="center">睡觉</td></tr><tr><td align="center">sweep</td><td align="center">swept</td><td align="center">swept</td><td align="center">扫</td></tr></tbody></table><pre><code>(7)其他</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">lay</td><td align="center">laid</td><td align="center">laid</td><td align="center">躺,下蛋,放置</td></tr><tr><td align="center">pay</td><td align="center">paid</td><td align="center">paid</td><td align="center">付</td></tr><tr><td align="center">say</td><td align="center">said</td><td align="center">said</td><td align="center">说</td></tr><tr><td align="center">stand</td><td align="center">stood</td><td align="center">stood</td><td align="center">站</td></tr><tr><td align="center">understand</td><td align="center">understood</td><td align="center">understood</td><td align="center">明白</td></tr><tr><td align="center">lose</td><td align="center">lost</td><td align="center">lost</td><td align="center">失去</td></tr><tr><td align="center">have</td><td align="center">had</td><td align="center">had</td><td align="center">有</td></tr><tr><td align="center">make</td><td align="center">made</td><td align="center">made</td><td align="center">制造</td></tr><tr><td align="center">sell</td><td align="center">sold</td><td align="center">sold</td><td align="center">卖</td></tr><tr><td align="center">tell</td><td align="center">told</td><td align="center">told</td><td align="center">告诉</td></tr></tbody></table><pre><code>ABC(1) ow/aw</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">blow</td><td align="center">blew</td><td align="center">blown</td><td align="center">吹</td></tr><tr><td align="center">draw</td><td align="center">drew</td><td align="center">drawn</td><td align="center">画画</td></tr><tr><td align="center">fall</td><td align="center">fell</td><td align="center">fallen</td><td align="center">落下</td></tr><tr><td align="center">grow</td><td align="center">grew</td><td align="center">grown</td><td align="center">生长</td></tr><tr><td align="center">know</td><td align="center">knew</td><td align="center">known</td><td align="center">知道</td></tr><tr><td align="center">throw</td><td align="center">threw</td><td align="center">thrown</td><td align="center">扔</td></tr></tbody></table><pre><code>(2) i + 辅音字母 + e</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">drive</td><td align="center">drove</td><td align="center">driven</td><td align="center">驾驶</td></tr><tr><td align="center">give</td><td align="center">gave</td><td align="center">given</td><td align="center">给</td></tr><tr><td align="center">forgive</td><td align="center">forgave</td><td align="center">forgive</td><td align="center">原谅</td></tr><tr><td align="center">hide</td><td align="center">hid</td><td align="center">hidden</td><td align="center">隐藏</td></tr><tr><td align="center">ride</td><td align="center">rode</td><td align="center">ridden</td><td align="center">骑</td></tr><tr><td align="center">write</td><td align="center">wrote</td><td align="center">written</td><td align="center">写</td></tr></tbody></table><pre><code>(3) ea/ee</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">bear</td><td align="center">bore</td><td align="center">born&#x2F;borne</td><td align="center">负担&#x2F;忍受</td></tr><tr><td align="center">break</td><td align="center">broke</td><td align="center">broken</td><td align="center">打破</td></tr><tr><td align="center">freeze</td><td align="center">froze</td><td align="center">frozen</td><td align="center">冷冻</td></tr><tr><td align="center">speak</td><td align="center">spoke</td><td align="center">spoken</td><td align="center">说</td></tr><tr><td align="center">steal</td><td align="center">stole</td><td align="center">stolen</td><td align="center">偷</td></tr><tr><td align="center">wear</td><td align="center">wore</td><td align="center">worn</td><td align="center">穿</td></tr></tbody></table><pre><code>(4)i--&gt;a--&gt;u</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">begin</td><td align="center">began</td><td align="center">begun</td><td align="center">开始</td></tr><tr><td align="center">drink</td><td align="center">drank</td><td align="center">drunk</td><td align="center">喝</td></tr><tr><td align="center">sing</td><td align="center">sang</td><td align="center">sung</td><td align="center">唱</td></tr><tr><td align="center">swim</td><td align="center">swam</td><td align="center">swum</td><td align="center">游泳</td></tr><tr><td align="center">ring</td><td align="center">rang</td><td align="center">rung</td><td align="center">打电话</td></tr></tbody></table><pre><code>(5)其他</code></pre><table><thead><tr><th align="center">动词原型</th><th align="center">过去式</th><th align="center">过去分词</th><th align="center">词义</th></tr></thead><tbody><tr><td align="center">be(is&#x2F;am&#x2F;are)</td><td align="center">was&#x2F;were</td><td align="center">been</td><td align="center">是</td></tr><tr><td align="center">choose</td><td align="center">chose</td><td align="center">chosen</td><td align="center">选择</td></tr><tr><td align="center">do</td><td align="center">did</td><td align="center">done</td><td align="center">做</td></tr><tr><td align="center">eat</td><td align="center">ate</td><td align="center">eaten</td><td align="center">吃</td></tr><tr><td align="center">fall</td><td align="center">fell</td><td align="center">fallen</td><td align="center">落下</td></tr><tr><td align="center">fly</td><td align="center">flew</td><td align="center">flown</td><td align="center">飞</td></tr><tr><td align="center">forget</td><td align="center">forgot</td><td align="center">forgotten</td><td align="center">忘记</td></tr><tr><td align="center">get</td><td align="center">got</td><td align="center">gotten</td><td align="center">得到</td></tr><tr><td align="center">go</td><td align="center">went</td><td align="center">gone</td><td align="center">去</td></tr><tr><td align="center">lie</td><td align="center">lay</td><td align="center">lain</td><td align="center">躺</td></tr><tr><td align="center">lie</td><td align="center">lied</td><td align="center">lied</td><td align="center">说谎</td></tr><tr><td align="center">mistake</td><td align="center">mistook</td><td align="center">mistaken</td><td align="center">弄错</td></tr><tr><td align="center">see</td><td align="center">saw</td><td align="center">seen</td><td align="center">看见</td></tr><tr><td align="center">take</td><td align="center">took</td><td align="center">taken</td><td align="center">拿</td></tr></tbody></table><h1 id="时态"><a href="#时态" class="headerlink" title="时态"></a>时态</h1><h2 id="一般现在时"><a href="#一般现在时" class="headerlink" title="一般现在时"></a>一般现在时</h2><pre><code>1.经常性和习惯性动词  do/doesevery day/year,sometime,on Sunday,often,usually,always.    He goes to school everyday.    他每天都去上学。2.不受时间限制的科学事实或客观真理    The earth mores around the sun.    地球绕着太阳转。3.汽车飞机会议等暗时刻表将要发生的事    The train leaves at three this afternoon.    火车今天下午三点开。4.在时间条件状语从句中，用一般现在时态形式表示将来，主将从现。    If it is be fine tomorrow,we will go to the country side.    如果明天天气好，我们就去乡下。    Ben will like her as soon as he sees her.    本一见到她就会喜欢她的。</code></pre><h2 id="一般过去时"><a href="#一般过去时" class="headerlink" title="一般过去时"></a>一般过去时</h2><pre><code>结构：谓语动词用动词过去式yesterday,lastweek,an hour ago,in 1982.形式：    1、肯定形式:        主语+动词过去式+其他        eg：She often came to help us in those days.    2、否定形式：        2.1 was/were+not；        2.2 在行为动词前加didn&#39;t，同时还原行为动词        eg：I didn&#39;t know you like coffee.    3、一般疑问句：        3.1 Did+主语+谓语动词原型+其他？         3.2 WasWere+主语+表语?用法：    1.表示过去连续发生的动作    在这种情况下，往往没有表示过去的时间状语，而通过上下文来表示：        Where did you grow up?         你是在哪儿长大的?        I grew up right here in this neighborhood.        我就在这个居民区长大。    2.表示过去一段时间内经常或反复的动作    常与always，never等连用。如果强调已经终止的习惯或动作要用used to do sth.        Roland always took me out to dinner on my birthday.        我从前过生日时罗兰总是带我出去吃饭。    3.有些句子，虽然没有表示过去确定时间的状语，但实际上是指过去发生的动作或状态：        I thought it was true.        我以为这是真的。一般过去时       </code></pre><table><thead><tr><th align="left">肯定式</th><th align="center">疑问式</th><th align="center">否定式</th><th align="center">疑问否定式</th></tr></thead><tbody><tr><td align="left">I worked</td><td align="center">Did I work?</td><td align="center">I did not work</td><td align="center">Did I not work?</td></tr><tr><td align="left">He(She,It) worked</td><td align="center">Did he(she,it) work?</td><td align="center">He (she,it)did not work</td><td align="center">Did he(she,it)not work?</td></tr><tr><td align="left">We worked</td><td align="center">Did we work?</td><td align="center">We did not work</td><td align="center">Did we not work?</td></tr><tr><td align="left">You worked</td><td align="center">Did you work?</td><td align="center">You did not work</td><td align="center">Did you not work?</td></tr><tr><td align="left">They worked</td><td align="center">Did they work?</td><td align="center">They did not work</td><td align="center">Did they not work?</td></tr></tbody></table><h3 id="口诀-1"><a href="#口诀-1" class="headerlink" title="口诀"></a>口诀</h3><pre><code>一般过去时并不难，过去动作、状态记心间。动词要用过去式，时间状语句末站。否定句很简单，didn&#39;t 站在动原前，其它部分不要变。一般疑问句也好变，did放在句子前，主语、动原、其它部分依次站立。特殊疑问句也简单，疑问词加一般疑问句记心间。最后一条请注意，动词过去式要牢记！ </code></pre><h2 id="一般将来时"><a href="#一般将来时" class="headerlink" title="一般将来时"></a>一般将来时</h2><pre><code>1.  will/shall + 动词原型(in + 时间表将来)    shall 用于第一人称    will  各种人称    He will come back soon.    他很快就会回来。    Form now on I will/shall come for the newspaper every Monday.    从现在起，我每个星期一都来取报纸。2.1 be going to 有强计划性，打算做什么，而will表示谈话中突然的意图，临时性，偶然性。2.2  可用来表达某种迹象要发生的事情，而will不能表示    eg: I am going to GuiYang tomorrow.        我明天要去贵阳。        The telephone is ringing.I will answer it.        电话铃响了。我要去回电。3.  be to do(动词原型) 要按计划发生的事    eg: I&#39;m to play football tomorrow afternoon.        我明天下午要踢足球。        The girls are to go to school next week.        女孩们下周要去上学。4.be about to do     (1) 正要干什么，即将发生的事/动作，不与表示将来的时间状语连用。        eg：Don&#39;t go out .we are about to have dinner.        别出去，我们要吃晚饭了。    (2)常与when连用“就在这时”，是并列连句，构成句型“be about to do ...when...”        eg: I was about to leave when it rained.            我正要离开，这时下雨了。</code></pre><h2 id="过去将来时"><a href="#过去将来时" class="headerlink" title="过去将来时"></a>过去将来时</h2><pre><code>1. 用法    表示立足于过去某一时刻看将来要发生的动作或状态        第一人称 should 其他 would （常用于宾语从句）        He said he would stay with us.         他说他要与我们呆在一起。        过去将来时，用于虚拟语气中，如：            If I were you, I would not do that.             要是我是你的话，我就不会那样做。            If he were here, he would show us how to do it.             如果他在这儿，他就会向我们展示该如何做了。2. 结构    should / would + 动词原型        The boy promised he would work hard.        那男孩答应他会努力学习。        I told my parents I should return early.        我告诉我父母我应该早点回来。    was / were going to + 动词原形        He told us that he was going to attend the meeting.         他告诉我说他要参加那次会议。    was / were to + 动词原形        The building was to be completed next month.         这座建筑改在下个月竣工。      was / were about to + 动词原形        We were about to leave there when it began to rain heavily and suddenly.         就在我们要离开时，天突然下起了大雨。    was / were +现在分词            He was leaving the next day.         他第二天要走了。    </code></pre><h2 id="现在进行时"><a href="#现在进行时" class="headerlink" title="现在进行时"></a>现在进行时</h2><pre><code>结构    be(is,am,are) + doing1.表示现在进行的动作或状态2.表示将来发生的事，表示按计划发生的事，常用come,go,run,leave,begin,arrive等延续性动词eg:    We are flying to Paris tomorrow.    我们明天飞往巴黎。    They are leaving for shanghai next Monday.    他们下周一动身去上海。3.与always，forever,constantly(不断地，经常地)等连用，表示赞成或厌恶的感情色彩    He is always helping others(表赞扬)    他总是帮助别人    Tom is always lying to our teacher.(表说话者厌恶的态度)    汤姆总是对老师撒谎</code></pre><h2 id="过去进行时"><a href="#过去进行时" class="headerlink" title="过去进行时"></a>过去进行时</h2><pre><code>1.过去进行时主要表示过去某一时刻正在进行的动作，或表示过去某一阶段一直在进行的动作    eg: I was having a talk with Li Hua at that time.       那时，我正在跟李华谈话。    I was watching TV at home last night.     昨晚我一直在看电视。2.过去进行的构成过去进行时由“was / were + 现在分词”构成。eg:Clouds were flying across the sky.     云彩飘过天空。    Steam was rising from the coffee.     咖啡冒着热气。3.用的时间状语    at ten yearsago,last evening,when..,while,at that time,form to.4.表示在过去短期内正在进行的动作或存在的情况，这种情况通常不会长期如此。    It happened while I was living in Eastboume last year.     这件事发生于去年我住在伊斯特本的时候。5.表示为过去的将来安排好的活动和事件。这类用法在没有明确上下文的情况下，通常会连用一个表示将来时间的状语。如：    He said that his sister was getting married next December.     他说他妹妹12月结婚。</code></pre><h2 id="现在完成时"><a href="#现在完成时" class="headerlink" title="现在完成时"></a>现在完成时</h2><pre><code>结构：    have / has + done 1.表示动作在说之前就已经完成了，而对现在有影响常与表示延续性的时间状语连用,如：    so far(到目前为止)，reccently(最近)，since or,over time(随着时间的过去)等        I have lived in ZhuHai for three years.        我已经在珠海住了三年了。2.&quot;since + 时间点&quot;，for + 时间段    eg: He has studied English for five years        他学英语已经五年了        He has studied English since 1965.        他从1965年开始学英语。3.某件事/动作发生在过去，却没有结束，一直延续到现在。和时间段连用！    eg: Tom has known Jerry for 5 years.        汤姆和杰瑞认识5年啦！        He has made great progress in the past 3 months.        过去3个月里，他已经取得了很大进步。    这种情况常与for / since / up to now / until now / for a long time / these days    等表示时间段的词搭配。</code></pre><h2 id="过去完成时"><a href="#过去完成时" class="headerlink" title="过去完成时"></a>过去完成时</h2><pre><code>“had” + 动词过去分词。    You gradated(毕业) from Junior Middle school in July 2013,You had stayed there for three years when you graduated.    你2013年7月初中毕业，毕业时你已经在那里呆了三年了。1.表示过去某一时刻或某一动作之前完成的动作或状态，句中常用by,before,until,when等。    They the end of last term we had learnt 20 units2.表示过去未曾实现的愿望或打算(&quot;本想&quot;)    eg:I had hoped to see more of ShangHai        我希望能多看看上海        I had meant to help you.but I was too busy at the moment.        我本来是想帮你的。但我现在太忙了。</code></pre><h3 id="比较一般过去时-amp-amp-现在完成时"><a href="#比较一般过去时-amp-amp-现在完成时" class="headerlink" title="比较一般过去时 &amp;&amp; 现在完成时"></a>比较一般过去时 &amp;&amp; 现在完成时</h3><pre><code>一般过去时，只表示在过去的动作或存在的状态，不涉及对现在的影响表示发生在过去的动/状 一直延续到现在，或强调过去的事情对现在的影响My family lived in ZhuHai ten years ago.(现在不在珠海)我们家十年前住在珠海。My family have lived in ZhuHai for 10 years.(目前在珠海)             我们家在珠海住了10年了。</code></pre><h1 id="句型"><a href="#句型" class="headerlink" title="句型"></a>句型</h1><h2 id="简单句"><a href="#简单句" class="headerlink" title="简单句"></a>简单句</h2><h3 id="主-谓"><a href="#主-谓" class="headerlink" title="主 + 谓"></a>主 + 谓</h3><pre><code>这种句型中的动词大多是不及物动词，所谓不及物动词，就是这种动词后不可以直接接宾语。常见的动词如：work, sing, swim, fish, jump, arrive, come, die, disappear, cry, happen等。eg: Li Ming works very hard.李明学习很努力。</code></pre><h3 id="主-谓-宾"><a href="#主-谓-宾" class="headerlink" title="主 + 谓 + 宾"></a>主 + 谓 + 宾</h3><pre><code>这种句型中的动词一般为及物动词, 所谓及物动词，就是这种动词后可以直接接宾语.其宾语通常由名词、代词、动词不定式、动名词或从句等来充当。    eg:He took his bag and left.        (名词) 他拿着书包离开了。</code></pre><h3 id="主-系-表"><a href="#主-系-表" class="headerlink" title="主 + 系 + 表"></a>主 + 系 + 表</h3><pre><code>这种句型主要用来表示主语的特点、身份等。其系动词一般可分为下列两类：    1.表示状态。这样的词有：be, look, seem, smell, taste, sound, keep等。如：        eg:This kind of food tastes delicious.        这种食物吃起来很可口。    2.表示变化。这类系动词有：become, turn, get, grow, go等。如：        eg:Spring comes. It is getting warmer and warmer.        春天到了，天气变得越来越暖和。</code></pre><h3 id="主-谓-间接宾语-间接宾语"><a href="#主-谓-间接宾语-间接宾语" class="headerlink" title="主 + 谓 + 间接宾语 + 间接宾语"></a>主 + 谓 + 间接宾语 + 间接宾语</h3><pre><code>这种句型中，直接宾语为主要宾语，表示动作是对谁做的或为谁做的，在句中不可或缺，常常由表示“物”的名词来充当;间接宾语也被称之为第二宾语，去掉之后，对整个句子的影响不大，多由指“人”的名词或代词承担。引导这类双宾语的常见动词有：buy, pass, lend, give, tell, teach, show, bring, send等。eg:Her father bought her a dictionary as a birthday present.她爸爸给她买了一本词典作为生日礼物。</code></pre><h3 id="主-谓-宾语-补语"><a href="#主-谓-宾语-补语" class="headerlink" title="主 + 谓 + 宾语 + 补语"></a>主 + 谓 + 宾语 + 补语</h3><pre><code>这种句型中的“宾语 + 补语”统称为“复合宾语”。宾语补足语的主要作用或者是补充、说明宾语的特点、身份等;或者表示让宾语去完成的动作等。担任补语的常常是名词、形容词、副词、介词短语、分词、动词不定式等。    eg:You should keep the room clean and tidy.     你应该让屋子保持干净整洁。(形容词)    We made him our monitor.    我们选他当班长。(名词)</code></pre><h2 id="并列句"><a href="#并列句" class="headerlink" title="并列句"></a>并列句</h2><pre><code>由并列连词连接、含有两个或更多主谓结构的句子叫并列句。 连接两个简单句，有时句中某些词可以省略；连接两个并列成分，可以放在一个句子的句首，后面不接逗号。 eg:    I hope you don&#39;t mind me asking, but where did you buy those shoes?    我希望你不介意我问，你在哪里买的那双鞋?</code></pre><h2 id="复合句"><a href="#复合句" class="headerlink" title="复合句"></a>复合句</h2><pre><code>从属连词这种连词用以引导名词性从句和状语从句；由从属连词所引导的句子叫从句,而含有从句的句子叫作复合句。</code></pre><h1 id="被动语态"><a href="#被动语态" class="headerlink" title="被动语态"></a>被动语态</h1><h2 id="主动语态-amp-被动语态"><a href="#主动语态-amp-被动语态" class="headerlink" title="主动语态 &amp; 被动语态"></a>主动语态 &amp; 被动语态</h2><pre><code>主动语态表示句子的：主语为动作的出发者/执行者被动语态表示句子的：主语为动作的承受者</code></pre><h3 id="一般过去时的被动语态"><a href="#一般过去时的被动语态" class="headerlink" title="一般过去时的被动语态"></a>一般过去时的被动语态</h3><pre><code>was/were + done</code></pre><h3 id="一般将来时的被动语态"><a href="#一般将来时的被动语态" class="headerlink" title="一般将来时的被动语态"></a>一般将来时的被动语态</h3><pre><code>will/shall + be done</code></pre><h3 id="进行时的被动语态"><a href="#进行时的被动语态" class="headerlink" title="进行时的被动语态"></a>进行时的被动语态</h3><pre><code>现在进行    am/is/are + being + done过去进行    was/were + being + done</code></pre><h3 id="现在完成时的被动语态"><a href="#现在完成时的被动语态" class="headerlink" title="现在完成时的被动语态"></a>现在完成时的被动语态</h3><pre><code>have/has + been + done</code></pre><h3 id="过去完成时的被动语态"><a href="#过去完成时的被动语态" class="headerlink" title="过去完成时的被动语态"></a>过去完成时的被动语态</h3><pre><code>had + been + done</code></pre><h3 id="过去将来时的被动语态"><a href="#过去将来时的被动语态" class="headerlink" title="过去将来时的被动语态"></a>过去将来时的被动语态</h3><pre><code>would/should + been + doneHe said others would love him if he loved others.他说，如果他爱别人，别人也会爱他。He said he would be loved by others,if he loved others.他说，如果他爱别人，就会被别人爱。</code></pre><h3 id="情态动词的被动语态"><a href="#情态动词的被动语态" class="headerlink" title="情态动词的被动语态"></a>情态动词的被动语态</h3><pre><code>情态动词 + be + doneAmy can take good care of Gina.艾米能照顾好吉娜。Gina can be taken good care of by Amy.吉娜会被艾米照顾得很好。</code></pre><pre class="line-numbers language-免责声明" data-language="免责声明"><div class="caption"><span>English note Ⅰ</span></div><code class="language-免责声明">本文整理自网络开放资源，仅用作学习交流，非商用，如侵删！笔记有任何问题可以私信我，会在第一时间改回来的。微信：Chenhaonan_oQQ: 3239676086<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script> <script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->  ]]></content>
    
    
    <summary type="html">Englishnote2</summary>
    
    
    
    <category term="English" scheme="http://whoispower.cn/categories/English/"/>
    
    
    <category term="note" scheme="http://whoispower.cn/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>English noteⅠ</title>
    <link href="http://whoispower.cn/2022/07/01/English-Notes%201/"/>
    <id>http://whoispower.cn/2022/07/01/English-Notes%201/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-07-15T04:14:04.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="英语名词复数变化"><a href="#英语名词复数变化" class="headerlink" title="英语名词复数变化"></a>英语名词复数变化</h1><h2 id="规则变化"><a href="#规则变化" class="headerlink" title="规则变化"></a>规则变化</h2><pre><code>1、一般在词尾加－s.    cups   杯子    days   日子2、以s,sh,ch,x结尾的词在词尾加－es    classes 班级    buses  公共汽车3、以“元音字母＋y”结尾的词，加－s    boy-boys  男孩    army-armies 军队4.1、以o结尾的词，多数加－s    kilo-kilos  公里    photo-photos  照片4.2、特殊以o结尾的词，在词尾加-es    tomato-tomatoes  西红柿    hero-heroes  英雄    potato-potatoes  土豆    negro-negroes 黑人    volcano-volcanoes 火山5、把f或fe变成v再加es的 词有9个。    口诀：    妻子拿刀去杀狼，吓得小偷架下藏。    半片树叶掉下来，砸到头上己命亡。    妻子wife-wives      刀子knife-knives        狼wolf-wolves，小偷thief-thives        架子shelf-shelves   半half-halves，    树叶leaf-leaves     自己self-selves         生命life-lives</code></pre><h2 id="不规则变化"><a href="#不规则变化" class="headerlink" title="不规则变化"></a>不规则变化</h2><pre><code>1、不规则变化的    man-men  男子    woman-women  女人    foot-feet  脚    goose-geese  鹅    tooth-teeth   牙齿    child-children  小孩    ox-oxen  牛    mouse-mice  老鼠2、单数形式与复数形式相同    sheep-sheep  绵羊    deer-deer  鹿3、中日不变，英法变，其余后面加S    Chinese-Chinese  中国人    Japanese-Japanese  日本人    Englishman-Englishmen 英国人    Frenchman-Frenchmen  发国人        其余的像American\Australian等等的复数在后面加s,    所以两个美国人要变成two Americans.    </code></pre><h1 id="冠词"><a href="#冠词" class="headerlink" title="冠词"></a>冠词</h1><pre><code>冠词: 没有掌握音标的同学可以先记语a,e,i,o,u这五个元音字母。    一般以这五个字母开头基本是以元音音素开头，个别单词除外。</code></pre><p><a href="https://www.bilibili.com/video/BV1Kf4y1j7Ap?t=1.3">点我学10分钟学音标</a></p><h2 id="不定冠词a-an"><a href="#不定冠词a-an" class="headerlink" title="不定冠词a\an"></a>不定冠词a\an</h2><pre><code>1.1 a用于以辅音音素开头的单词前    不规则：        a useful 有用的        a unifrom 制服        a usual  通常        a university 大学        a useless  无用的 1.2 an用于以元音音素开头的单词前    不规则：        an honest 诚实        an hour 小时        an European 欧洲人2.表示某类人或物    不定冠词a或an表示一类人或一类事物，在翻译时a或an不译成中文汉字。        A tailor makes clothes.  裁缝做衣服。        An owl can see in the dark.  猫头鹰在黑暗中能看见东西。3.表数量        a book 一本书 an island 一座岛        a knife 一把刀 an hour 一小时        I have a yellow umbrella.        我有一把黄色的伞。        There is a fox and an elephent in the forest.        森林里有一只狐狸和一头大象。4.用于初次提及某人或物    当第一次提到某人或某事物，非特指时，用不定冠词a或an起介绍作用。        She is sitting on a chair.        她坐在一张椅子上。</code></pre><h3 id="不定冠词-记一记"><a href="#不定冠词-记一记" class="headerlink" title="不定冠词-记一记"></a>不定冠词-记一记</h3><pre><code>have a look 看一看 have a good time 过得愉快have a talk 演讲have a fever 发烧hava a lesson 教一堂课have a bath 洗个澡have a rese 休息have(talk) a walk 散步hava headache 头痛have a nice trip 路途愉快have a try 试一试have a word with 与..谈一谈a quarter 四分之一half an hour 半小时three times a day 三天一次</code></pre><h2 id="定冠词"><a href="#定冠词" class="headerlink" title="定冠词"></a>定冠词</h2><pre><code>1. the + 序数词         Mother was my first teacher in my life.妈妈是我生命中的第一个老师. 2. the + 最高级         I am the tallest in our class. 我是咱们班里个子最高的3. the + 独一无二    the Yangtze River 长江     the Yellow River黄河4. the + 乐器    the paino 钢琴5. the + adj(表类人)    the young 年轻人    the poor 穷人</code></pre><h2 id="零定冠词"><a href="#零定冠词" class="headerlink" title="零定冠词"></a>零定冠词</h2><pre><code>零冠词使用口诀及注释：下列情况免冠词，代词限定名词前，专有名词不可数，科球类三餐饭，复数名词表泛指，两季星期月份前，颜色语种和国名，称呼习语和头衔。1．下列情况免冠词，代词限定名词前，代词限定词放在名词的前面时，名词不加冠词：    my book; any book2．专有名词不可数，科球类三餐饭，    2.1 不可数名词，专有名词通常不加冠词。        Failure is the mother of success.　失败乃成功之母    2.2 在三餐、球类运动和娱乐运动的名称前，不加冠词，        have breakfast，play chess。3．复数名词表泛指，两季星期月份前，    We go to school from Monday to Friday.　     我们从星期一到星期五都上课。4．颜色语种和国名，称呼习语和头衔    4.1 颜色语种和国名如         in black; in English; in Canada    4.2 在称呼或表示官衔，职位的名词前不加冠词。        The guards took the American to General Lee.         士兵们把这个美国人送到李将军那里。</code></pre><h1 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h1><pre><code>定义与分类代词是代替名词及起名词作用的短语或句子的词。代词根据其意思和用法可分为:人称代词、物主代词、指示代词、相互代词、疑问代词、连接代词、关系代词、不定代词等九类。</code></pre><p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.fbceef8db08fa1030099bfb249e144fb?rik=HulMc1nTn74g8w&riu=http://www.1mpi.com/pic/764ae1ac36a4b87ff1ea87f8/1-480-jpg_6_0_______-785-0-636-785.jpg&ehk=gB3JmsEbFnamSR2AbvQZRsfuTA350Zn1tlgzvzfuamQ=&risl=&pid=ImgRaw&r=0&sres=1&sresct=1"></p><h2 id="人称代词的用法"><a href="#人称代词的用法" class="headerlink" title="人称代词的用法"></a>人称代词的用法</h2><pre><code>人称代词有主格和宾语之分：主格用作主语，宾语用作宾语。“Who is it?” “It’s me.” “是谁呀?”“是我。”He sings better than me. 他比我唱得好。注：单独使用的人称代词通常用宾格，即使它代表主语时也是如此。如：“I like English.” “Me too.” “我喜欢英语。”“我也喜欢。”</code></pre><h2 id="物主代词的用法"><a href="#物主代词的用法" class="headerlink" title="物主代词的用法"></a>物主代词的用法</h2><pre><code>物主代词分形容词性物主代词和名词性物主代词。形容词性物主代词在句中只用作定语；名词性物主代词则不能用作定语，但可以用作主语、宾语、表语、连用of作定语等。如：Here is my dog. Its name is Tom. 这是我的狗，它的名字叫汤姆。Is that coffee yours or hers? 这咖啡是你的还是她的?【注意】可以说 a friend of mine (ours, yours, hers, his, theirs)，但是不能说 a friend of me (us, you, her, him, them)。有时同一个结构用不用物主代词会导致含义的变化。如：Do’t lose heart. 别灰心。She lost her heart to Jim. 她爱上了吉姆。</code></pre><h2 id="反身代词的用法"><a href="#反身代词的用法" class="headerlink" title="反身代词的用法"></a>反身代词的用法</h2><pre><code>反身代词可用作宾语、同位语、表语等。用作同位语时，主要用于加强被修饰词的语气，可紧放在被修饰名词后或句末。如：He himself was a doctor. 他本人就是一位医生。She is too young to look after herself. 她太小，无法照顾自己。That poor boy was myself.那个可怜的孩子就是我自己。注：用于 be, feel, seem, look 等后作表语表示身体或精神处于正常状态。如：I&#39;ll be myself again in no time. 我一会儿就会好的。I’m not quite myself these days. 我近来身体不大舒服。</code></pre><h3 id="反身代词记一记"><a href="#反身代词记一记" class="headerlink" title="反身代词记一记"></a>反身代词记一记</h3><pre><code>leave one by oneself 把某人单独留下help oneself to 帮助自己by oneself 独自，靠某人/自己hurt oneself 伤害某人/自己enjoy oneself == have fun == have a good time 过得快乐/享受learn by oneself == teach oneself 自学say to oneself 自言自语dress oneself 自己穿衣服make oneself at home 想在自己家一样/别拘束lose oneself in 沉浸于</code></pre><h2 id="不定代词"><a href="#不定代词" class="headerlink" title="不定代词"></a>不定代词</h2><h3 id="each-every"><a href="#each-every" class="headerlink" title="each every"></a>each every</h3><pre><code>each    可与of连用    可做代词,形容词,单独使用,主语,宾语,定语,同位语    着重个别 用于两个或两者以上，不可单独使用。every    仅做形容词，不可单独使用    着重全体，毫无例外    三者或三者以上</code></pre><h3 id="few-little"><a href="#few-little" class="headerlink" title="few little"></a>few little</h3><table><thead><tr><th align="center">否定</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">可数</td><td align="center">few</td><td align="center">不多几乎没有</td></tr><tr><td align="center">不可数</td><td align="center">little</td><td align="center">单元格</td></tr></tbody></table></hr><table><thead><tr><th align="center">肯定</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">可数</td><td align="center">a few</td><td align="center">虽然少，单有几个</td></tr><tr><td align="center">不可数</td><td align="center">a little</td><td align="center">少，但有一点</td></tr></tbody></table></hr><table><thead><tr><th align="center"></th><th align="center">比较级</th><th align="center">最高级</th></tr></thead><tbody><tr><td align="center">few</td><td align="center">fewer</td><td align="center">fewest</td></tr><tr><td align="center">little</td><td align="center">less</td><td align="center">least</td></tr></tbody></table><h3 id="all-none"><a href="#all-none" class="headerlink" title="all none"></a>all none</h3><pre><code>all     三者或三者以上都none    三者或三者以上都不</code></pre><h3 id="both-neither"><a href="#both-neither" class="headerlink" title="both neither"></a>both neither</h3><pre><code>both    两者和两者以上都neither    两者和两者以上都不</code></pre><h3 id="either-neither"><a href="#either-neither" class="headerlink" title="either neither"></a>either neither</h3><table><thead><tr><th align="center">either</th><th align="center">两者中的任何一个</th><th align="center">either or</th><th align="center">要么…要么…</th></tr></thead><tbody><tr><td align="center">neither</td><td align="center">两者都不</td><td align="center">neither nor</td><td align="center">既不…也不</td></tr></tbody></table><h3 id="another-other-others-the-other-the-others"><a href="#another-other-others-the-other-the-others" class="headerlink" title="another,other,others,the other,the others"></a>another,other,others,the other,the others</h3><table><thead><tr><th align="center">another</th><th align="center">另一个</th><th align="center">三者以上另一个</th><th align="center"></th></tr></thead><tbody><tr><td align="center">other</td><td align="center">其他的</td><td align="center">做定语</td><td align="center">+n</td></tr><tr><td align="center">others</td><td align="center">其他的人或事物</td><td align="center">除去一些后，剩下的一些，非全部</td><td align="center"></td></tr><tr><td align="center">the other</td><td align="center">两者中的另一个</td><td align="center">通常和one连用</td><td align="center">one the other</td></tr><tr><td align="center">the others</td><td align="center">其他所有人或事物</td><td align="center">出去一部分，剩下全部</td><td align="center"></td></tr></tbody></table><h2 id="相互代词的用法"><a href="#相互代词的用法" class="headerlink" title="相互代词的用法"></a>相互代词的用法</h2><pre><code>英语的相互代词只有each other和one another，它们在句中通常只用作宾语，不能用作主语或状语等。如：Students should help one another. 学生应该互相帮助。We had known each other for many years. 我们认识许多年了。注：相互代词可以有所有格形式(each other’s, one another’s)。如：They often stay in one another&#39;s house. 他们常常在彼此的家里住。each other用于两者，one another用于三者，但在现代英语中它们常可换用(即均可用于两者或三者)。</code></pre><h2 id="指示代词的用法"><a href="#指示代词的用法" class="headerlink" title="指示代词的用法"></a>指示代词的用法</h2><pre><code>指示代词主要有四个，即this, that, these 和 those。它们在句中可作主语、宾语、表语、定语等。具体使用时应注意以下几点：1.为避免重复，可用 that 和 those 代替前面提到的名词。如：Our grain output is now 5 times that of 1980. 我们现在的粮食产量是1980年的5倍。（that=the grain output）2.用来回指上文提到的事情时，可用this 或 that，但是若要指下文叙述的事情，通常要用 this。如：I want to know this: Is she beautiful? 我想知道这一点：她美吗?</code></pre><p>3.在打电话时，通常用 this 指自己，用that指对方：</p><pre><code>Hello. This is Jim. Is that John? 喂，我是吉姆，你是约翰吗?</code></pre><p>4.除用作代词外，this 和that 还可用作副词，用以修饰形容词或副词，意为“这么”、“那么”，相当于 so。如：</p><pre><code>I&#39;ve done only that much. 我所做的就这么多。Is he always this busy? 他总这么忙吗?</code></pre><h2 id="疑问代词的用法"><a href="#疑问代词的用法" class="headerlink" title="疑问代词的用法"></a>疑问代词的用法</h2><pre><code>1.疑问代词即指who, whom, whose, which, what等用于引出特殊疑问句的代词。它们在句中可用作主语、表语、宾语、定语等。如：What did she say? 她怎么说?Which are our seats? 哪些是我们的座位?What are you worrying about? 你为什么事烦恼?注：who 和 whom 只用作主语、宾语和表语，不用作定语；what, which, whose 则既可用作主语、宾语和表语，也可用作定语。2.what与 which的用法区别：当选择的范围较明确时，用 which；当选择的范围不明确时，用 what。如：Which color do you like, red, black or white? 红色、黑色和白色，你喜欢哪种？What color is your car? 你的汽车是什么颜色的？3.连接代词的用法1.连接代词主要包括who, whom, what, which, whose, whoever, whatever, whichever, whosever 等.它们在句中可用作主语、宾语、表语、定语等（但who, whom, whoever 等不用于名词前作定语）主要用于引导主语从句、宾语从句和表语从句等。如：Ask him which he wants. 问他要哪一个。The question is who can help us. 问题是谁能帮助我们。What he says sounds reasonable. 他说的话听起来有道理。2.关系代词型 what 的用法。比较以下句子：I don’t know what you like. 我不知道你喜欢什么。You can get what you like. 你想要什么就可得到什么。第一句中的 what 表示“什么”；第二句中的 what 则具有关系代词的性质，相当于“先行词+关系代词”，表示“…所…的一切事或东西”.如上面第二句的 what就相当于 everything that。顺便说一句，这样用的 what 有时还可后接一个名词。如：We gave him what (little) help we could. 我们给了他我们力所能及的帮助。3.whatever, whoever与whichever的用法：它们可用于引导主语从句和宾语从句，也可用于引导让步状语从句。如：Whoever comes will be welcome. 任何人来都欢迎。Whatever she did was right. 她做的一切都是对的。Whoever you are, you can&#39;t enter. 不管你是谁，都不能进去。Whichever side wins, I shall be happy. 不管哪边赢，我都会高兴。</code></pre><h1 id="数词"><a href="#数词" class="headerlink" title="数词"></a>数词</h1><pre><code>简称（num),是指表示数目多少或顺序多少的词。 英语的数词可以作句子的主语、宾语、表语和定语。 数词分为两大类，即基数词和序数词。</code></pre><h2 id="基数词"><a href="#基数词" class="headerlink" title="基数词"></a>基数词</h2><h3 id="表达方式"><a href="#表达方式" class="headerlink" title="表达方式"></a>表达方式</h3><pre><code>从1——10one，two，three，four，five，six，seven，eight，nine，ten．从 11——19这里除 eleven， twelve， thirteen， fifteen， eighteen为特殊，其他加teen从 21——99整数几十中除twenty，thirty, forty，fifty，eighty为特殊形式外基数词形式之间添加连字符“-”     21 twenty-one 76 seventy-six百位数个数基数词形式加“hundred”，表示几百，在几十几与百位间加上and． 101 a hundred and one320 three hundred and twenty648 six hundred and forty-eight千位数以上,billion,million,thousand</code></pre><h3 id="表确切和大约"><a href="#表确切和大约" class="headerlink" title="表确切和大约"></a>表确切和大约</h3><pre><code>表确切：数字 + 无‘s’，eg: two hundred表大约：s + of : hundred of 几百</code></pre><h3 id="表年龄"><a href="#表年龄" class="headerlink" title="表年龄"></a>表年龄</h3><pre><code>在某人几十多岁时，in one&#39;s + 基数词的复数eg: in her fifties</code></pre><h3 id="世纪，年份"><a href="#世纪，年份" class="headerlink" title="世纪，年份"></a>世纪，年份</h3><pre><code>in the + 带整十年份的复数或加&#39;seg: 十八世纪二十年代    in the 1820s/1820&#39;s</code></pre><h3 id="year-old-做定语"><a href="#year-old-做定语" class="headerlink" title="year old 做定语"></a>year old 做定语</h3><pre><code>year old 做定语，year 用单数形式eighteen-year-old == enghteen years old</code></pre><h2 id="序数词"><a href="#序数词" class="headerlink" title="序数词"></a>序数词</h2><h3 id="基变序口诀"><a href="#基变序口诀" class="headerlink" title="基变序口诀"></a>基变序口诀</h3><pre><code>英语序数词口诀规律：    一二三特殊记，结尾各是 t, d, d （first、second、third）。    其余th加后面（fourth），八去t，九去e（eighth、ninth），    ve 要用 f替（fifth, twelfth），ty变成tie（twentieth，thirtieth）。    若是遇到几十几，只变个位就可以（twenty-first、twenty-second）。</code></pre><h3 id="分数表达法"><a href="#分数表达法" class="headerlink" title="分数表达法"></a>分数表达法</h3><pre><code>分子基数词,分母序数词，分子大于一，分母要加seg： 1/2 (a)one half     1/4  a fourth/a quarter</code></pre><h3 id="时间表达法"><a href="#时间表达法" class="headerlink" title="时间表达法"></a>时间表达法</h3><pre><code>1. min &lt;= 30 用分钟+ past + 小时    eg: 08:10 ten past eighth2. min &gt; 30  用‘所差分数’ + to + 下一整数点    eg: 06:50    ten to seven</code></pre><h3 id="倍数表达法"><a href="#倍数表达法" class="headerlink" title="倍数表达法"></a>倍数表达法</h3><pre><code>倍数 + adj/adv比较级 + than + 比较对象(a比b...倍)    eg：This room is times as big as that one倍数 + as + 原级 + as + 比较级(a是b的...倍)    eg: This is fourh times than that one</code></pre><h3 id="表示编号"><a href="#表示编号" class="headerlink" title="表示编号"></a>表示编号</h3><pre><code>名词+基数     eg: 401房间 Room 401         第五页  Page Fivethe + 序数词 + 名词    eg: the Seventh page</code></pre><h1 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h1><pre><code>又称作前置词，表示名词、代词等与句中其他词的关系，在句中不能单独作句子成分。介词后面一般有名词、代词或相当于名词的其他词类、短语或从句作它的宾语，表示与其他成分的关系。介词和它的宾语构成介词词组，在句中作状语，表语，补语，定语或介词宾语。介词可以分为时间介词、地点介词、方式介词、原因介词、数量介词和其他介词。介词一般用于名词或者代词前面，表示该词与句中其他成分的关系。介词后面的名词或代词称为介词宾语（如果是人称代词，则要用宾格）。介词和介词宾语合在一起构成介词短语。</code></pre><h2 id="表时间"><a href="#表时间" class="headerlink" title="表时间"></a>表时间</h2><pre><code>at:    时刻 eg: at six,    早中晚 eg: at night    节日 eg: at Christmason :    星期,具体一天的早中晚    on monday,on nightin :    年,月,季节    早,中,晚    in last year</code></pre><h2 id="时间段"><a href="#时间段" class="headerlink" title="时间段"></a>时间段</h2><pre><code>in + 时间段 --&gt;  将来after + 时间段 --&gt; 过去for + 时间段 --&gt; 现在完成时</code></pre><h2 id="去了…"><a href="#去了…" class="headerlink" title="去了….."></a>去了…..</h2><pre><code>have been to//去了回来了have gone to//去了还没回来</code></pre><h2 id="表地点"><a href="#表地点" class="headerlink" title="表地点"></a>表地点</h2><pre><code>in + 大地方at + 小地方on + 门牌号，楼层</code></pre><h2 id="某物之前"><a href="#某物之前" class="headerlink" title="某物之前"></a>某物之前</h2><pre><code>in front of 在某物外部之前in the front of 在某物的内部前 </code></pre><h2 id="方位介词"><a href="#方位介词" class="headerlink" title="方位介词"></a>方位介词</h2><pre><code>on 在...上(表面接触)above 在..上方over 在...正上方(不接触)under 在...下面below 在..下方</code></pre><p><img src="/img/Englishimgs/fangwei.png"></p><h2 id="穿过，经过，越过…"><a href="#穿过，经过，越过…" class="headerlink" title="穿过，经过，越过…"></a>穿过，经过，越过…</h2><pre><code>through 中间穿过across 表面穿过over 上空越过past 旁边经过</code></pre><p><img src="/img/Englishimgs/chuanguo.png">   </p><h2 id="表范围"><a href="#表范围" class="headerlink" title="表范围"></a>表范围</h2><pre><code>in 在...范围之内to 在...范围之外on 相邻</code></pre><p><img src="/img/Englishimgs/fanwei.png"></p><h2 id="have-been-x2F-have-gone"><a href="#have-been-x2F-have-gone" class="headerlink" title="have been&#x2F; have gone"></a>have been&#x2F; have gone</h2><pre><code>have been to 去了回来了have gone to 去了没回来</code></pre><h2 id="between-among-during"><a href="#between-among-during" class="headerlink" title="between among during"></a>between among during</h2><pre><code>between 在两者之间    among 在...当中(三者以上)during 在...期间</code></pre><h2 id="besides-except"><a href="#besides-except" class="headerlink" title="besides except"></a>besides except</h2><pre><code>besides 除...之外(包含)    eg: I have another blue pen besides this one    除了这支，我还有另一支蓝笔except 除了..之外(不包含)    后面还可以接「wh- 疑问词引导的名词子句」，    表示「某些例外的情况」：    eg: He is usually nice except when he is drunk.    他通常满亲切的，除了喝醉的时候except for    eg: Your composition is good except for a few.    你的作文很好，除了少数。    except 放句首时，必须用except for    eg:Except for the boy, everyone is happy.    除了那个男孩，每个人都很高兴。【注意】搭配“except for”的后面只能接名词和名词短语.而“except”的后面既可以接名词、名词短语，也可以接从句、介词短语甚至动词。</code></pre><h2 id="介词动词搭配"><a href="#介词动词搭配" class="headerlink" title="介词动词搭配"></a>介词动词搭配</h2><pre><code>- 介词和动词的固定搭配- 同意动词和介词的搭配    look at 看      look for 找    look after 照顾    look over 检查  look out of 朝...外面看    look (a) round 环视    arrive in 到达(大地方)   arrive at 到达(小地方)    hear of 听说  hear from 收到...的来信    speed + 钱 + on sth. 花钱做某事    speed + 时间 + (in) doing sth. 花钱做某事    be good at  在...方面好   be weak in   在...方面差/弱    be good for 对...有好处   be bad for   对...有坏处    be late for 迟到          be sorry for 为...感到抱歉    be full of  充满          be busy with 忙于..    be angry with 对某人生气  be afraid of  害怕    be fond of 喜爱          be interested in 对...感兴趣      be different from 与...不同    be strict with sb in sb 在某事上对某人严格</code></pre><h1 id="连词"><a href="#连词" class="headerlink" title="连词"></a>连词</h1><pre><code>连词(conj conjunction)是一种虚词， 它不能独立担任句子成分而只起连接词与词，短语与短语以及句与句的作用。连词主要可分为4类:    并列连词.转折连词.选择连词和因果连词。连词也可以分为2类:    并列连词和从属连词。</code></pre><h2 id="并列连词"><a href="#并列连词" class="headerlink" title="并列连词"></a>并列连词</h2><h3 id="表并列关系的连词"><a href="#表并列关系的连词" class="headerlink" title="表并列关系的连词"></a>表并列关系的连词</h3><pre><code>1.表示并列关系的连词有：and, both…and…, not only… but also…和neither…nor… as well as等</code></pre><h4 id="and"><a href="#and" class="headerlink" title="and"></a>and</h4><pre><code>and :和，并且A：基本用法：    “and”表示 “和”、“并且”的意思，用来连接对等关系的字和字，片语和片语，句子和句子。    I enjoy basketball , football and table tennis.    我喜欢篮球、足球和乒乓球。    The weather becomes colder and colder.    天气变得越来越冷。B:特别用法：    祁使句后连接and，有条件句作用，此时and=if you…,you’ll…    Go straight on, and you’ll see the library.等于    If you go straight on, you will see the library.    往前走，你会看到图书馆</code></pre><h4 id="both…and…"><a href="#both…and…" class="headerlink" title="both…and…"></a>both…and…</h4><pre><code>both…and…: 既…也…,(两者)都…A、both…and…构成的词组作主语时,谓语动词用复数。    Both Jim and Kate are from England.    吉姆和凯特都来自英国。B、both…and…否定句表示部分否定。    You can’t speak both German and English.    你不能同时说德语和英语。    Both my father and my mother aren’t doctors.    我的父亲和母亲都不是医生。</code></pre><h4 id="neither…nor…"><a href="#neither…nor…" class="headerlink" title="neither…nor…:"></a>neither…nor…:</h4><pre><code>    neither...nor:既不..也不..    neither…nor…连接两个并列主语时    谓语动词靠近哪个主语就与哪个主语保持 “人称”和 “数”的一致，即采取就近原则。    Neither I nor he has seen the play before.    我和他都没有看过这出戏。- not only…but also…:不但…而且…    not only…but also…连接两个主语后的谓语动词也遵循就近原则。    Not only the mother but also the children are ill.    不仅妈妈生病了，孩子也生病了。</code></pre><h3 id="表示选择关系的并列连词"><a href="#表示选择关系的并列连词" class="headerlink" title="表示选择关系的并列连词"></a>表示选择关系的并列连词</h3><pre><code>or, either…or…,whether… or…等。</code></pre><h4 id="or：或、否则"><a href="#or：或、否则" class="headerlink" title="or：或、否则"></a>or：或、否则</h4><pre><code>A:基本用法or 表示 “或” 的意思，使用于两者之中选择一个的时候。    Is your friend English or American? ----American.    你的朋友是英国人还是美国人？    美国人。    He doesn’t like dumplings or noodles.    他不喜欢饺子和面条。B:特别用法    祁使句后连接or ，表 “如果…,否则…”,有转折的意思，    此时 or =if you don’t …,you’ll …    Hurry up, or you’ll be late.=If you don’t hurry up, you’ll be late.    快点，否则你会迟到的。=如果你不快点，你会迟到的。</code></pre><h4 id="either…or…"><a href="#either…or…" class="headerlink" title="either…or…"></a>either…or…</h4><pre><code>    either…or…:或者…或者…; 不是…就是…;要么…要么…A:  either…or…连接两个并列主语时    谓语动词靠近哪个主语就与哪个主语保持 “人称”和 “数”的一致，即就近原则。    Either you or I am right.    不是你对就是我对。    Does either she or they like English?    是她还是他们喜欢英语?B:  由either…or…引导的否定句是完全否定。    She isn’t either a student or a teacher.    她既不是学生也不是老师。</code></pre><h4 id="whether…or…"><a href="#whether…or…" class="headerlink" title="whether…or…"></a>whether…or…</h4><pre><code>    whether…or…:不管…还是…    She is always cheerful, whether at home or at school.    无论是在家里还是在学校，她总是很高兴。</code></pre><h3 id="表转折关系"><a href="#表转折关系" class="headerlink" title="表转折关系"></a>表转折关系</h3><pre><code>表示转折关系的连词有：but, however, yet, still，while等。</code></pre><h4 id="but"><a href="#but" class="headerlink" title="but"></a>but</h4><pre><code>Mary was a nice girl, but she had one shortcoming.玛丽是个好女孩，但她有一个缺点。</code></pre><h4 id="yet"><a href="#yet" class="headerlink" title="yet"></a>yet</h4><pre><code>Tom got up early, yet he failed to catch the train.汤姆起得很早，但他没能赶上火车。</code></pre><h4 id="however"><a href="#however" class="headerlink" title="however"></a>however</h4><pre><code>Your composition is fairly good, however, there is still someroom for improvement.你的作文写得相当好，不过还有改进的余地。</code></pre><h4 id="still"><a href="#still" class="headerlink" title="still"></a>still</h4><pre><code>He was very tired, still he kept on walking.他很累了，但还是继续走。</code></pre><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><pre><code>Jane is hard working ,while her sister is quite lazy.简工作很努力，而她的妹妹却很懒。</code></pre><h3 id="表示因果关系"><a href="#表示因果关系" class="headerlink" title="表示因果关系"></a>表示因果关系</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code>    for:因为    He is not at school today, for he has a bad cold.    他今天没来上学，因为他患了重感冒。</code></pre><h4 id="so"><a href="#so" class="headerlink" title="so"></a>so</h4><pre><code>    It was late, so I went home.    很晚了，所以我回家了。    【注意】不与because连用</code></pre><h2 id="从属连词"><a href="#从属连词" class="headerlink" title="从属连词"></a>从属连词</h2><h3 id="引导时间状语从句"><a href="#引导时间状语从句" class="headerlink" title="引导时间状语从句"></a>引导时间状语从句</h3><pre><code>引导时间状语从句的从属连词有：before, after, when, while, as, until, since, as soon as等。After they had planted their crops, they took a rest.他们种完庄稼后，休息了一会儿。We have learned six lessons since he began to teach us.自从他开始教我们以来，我们已经学了六节课。As soon as he gets to Beijing, he’ll call me.他一到北京就会给我打电话。</code></pre><h4 id="when-while-as"><a href="#when-while-as" class="headerlink" title="when, while, as"></a>when, while, as</h4><pre><code>when, while, as 都表示“当……时”，when从句谓语动词既可以是瞬间动词也可以是延续性动词，可用于主从句动作同时发生或从句动作先于主句动作发生。eg: When I came in, my father was cooking.    我进来时，我父亲正在做饭。while从句谓语动词只能是延续性动词，侧重主从句动作同时发生。eg: I came in when/while my father was cooking.    我进来时，我父亲正在做饭。as引导一个持续性动作，多用于主从句动作同时发生，强调“一边……一边”。eg: He sang as he walked.    他边走边唱。</code></pre><h5 id="when-while-在并从时的不同含义"><a href="#when-while-在并从时的不同含义" class="headerlink" title="when while 在并从时的不同含义"></a>when while 在并从时的不同含义</h5><table><thead><tr><th align="center">连词</th><th align="center">并列连词</th><th align="center">从属连词</th></tr></thead><tbody><tr><td align="center">when</td><td align="center">就在那时</td><td align="center">当…的时候</td></tr><tr><td align="center">while</td><td align="center">“而”表示转折</td><td align="center">当…的时候</td></tr></tbody></table><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><pre><code>当主句谓语动词是延续性动词时，主从句都用肯定式，译为“直到……为止”;eg: Mr. Green waited until his children came back.    格林先生一直等到他的孩子们回来当主句谓语动词是瞬间动词时，主句用否定式，从句用肯定式，即not…..until, 译为“直到……才”。</code></pre><p>　　eg: Mr. Green didn’t go to bed until his children came back.<br>        格林先生直到他的孩子们回来才睡觉</p><h3 id="引导条件状语从句"><a href="#引导条件状语从句" class="headerlink" title="引导条件状语从句"></a>引导条件状语从句</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code>if:如果eg: If you don&#39;t go soon, you&#39;ll be late.    如果你不快点走，你就要迟到了。</code></pre><h4 id="unless"><a href="#unless" class="headerlink" title="unless"></a>unless</h4><pre><code>unless:除非，如果……不...eg:Unless you go soon, you&#39;ll be late.    如果你不快点走，你就要迟到了。</code></pre><h3 id="引导原因状语从句"><a href="#引导原因状语从句" class="headerlink" title="引导原因状语从句"></a>引导原因状语从句</h3><h4 id="because"><a href="#because" class="headerlink" title="because"></a>because</h4><pre><code>    because“因为”语气最强,回答why提问时只能用because，其引导的从句可放在句首或句末;    He didn’t go to school because he was ill.    他没去上学，因为他病了。</code></pre><h4 id="as-since"><a href="#as-since" class="headerlink" title="as,since"></a>as,since</h4><pre><code>as“由于”、since“既然”语气不如because强，引导的从句常置于句首;As it was raining, we went there by bus.因为下雨，我们乘公共汽车去了那里。Since everybody is here, let’s begin.既然大家都到了，我们开始吧。</code></pre><h4 id="for-1"><a href="#for-1" class="headerlink" title="for"></a>for</h4><pre><code>for是并列连词，语气最弱，对前面分句加以解释或补充说明，其引导的分句常置于句末且用逗号隔开。It must have rained last night, for the ground is wet.昨晚一定下雨了，因为地面是湿的。</code></pre><h3 id="引导目的状语从句"><a href="#引导目的状语从句" class="headerlink" title="引导目的状语从句"></a>引导目的状语从句</h3><pre><code>so that,in order that(以便，为了)eg: The teacher spoke loudly (so that/in order that) we could hear him clearly.老师说话声音很大，以便我们能听清楚。</code></pre><h3 id="引导让步状语从句"><a href="#引导让步状语从句" class="headerlink" title="引导让步状语从句"></a>引导让步状语从句</h3><pre><code>although/though(虽然，尽管)Although/ Though it is a very young country, it is very rich.虽然这是一个很年轻的国家，但它很富有。even though/if (即使)Even if/ though you were here yesterday, you couldn’t help him.即使你昨天在这里，你也不能帮助他。【注意】although/though 引导的从句不能与but连用，但可与yet, still连用。</code></pre><h3 id="引导结果状语从句"><a href="#引导结果状语从句" class="headerlink" title="引导结果状语从句"></a>引导结果状语从句</h3><pre><code>so that(结果是)eg:It was very cold, so that the water in the bowl froze.天很冷，碗里的水都冻住了。  so/such…that…(如此…以至于)等。He got there so early that he got a good seat.他到那儿那么早，找到了一个好座位。It is such a heavy box that nobody can move it.这是一个很重的箱子，谁也搬不动。</code></pre><h3 id="引导比较状语从句"><a href="#引导比较状语从句" class="headerlink" title="引导比较状语从句"></a>引导比较状语从句</h3><pre><code>as…as…(与……一样),He works as carefully as she.他工作和她一样认真。not as/so… as…(不及，赶不上),I can’t run as/so fast as you. 我跑得不如你快。than(比)I know you better than she does.我比她更了解你。</code></pre><h3 id="引导名词性从句"><a href="#引导名词性从句" class="headerlink" title="引导名词性从句"></a>引导名词性从句</h3><pre><code>that和if/whether(是否)We know that the earth goes around the sun.(宾语从句)我们知道地球绕着太阳转。I wonder if he has received my e-mail. (宾语从句)我想知道他是否收到了我的电子邮件。Whether he’ll go there hasn’t been decided.(主语从句)他是否去那里还没有决定。【注意】在时间状语从句和条件状语从句中，如果主句是将来时，从句要用一般现在时。I’ll go on with the work when I come back tomorrow.我明天回来时将继续工作。He won’t come unless he is invited.除非他受到邀请，否则他不会来的。</code></pre><pre class="line-numbers language-免责声明" data-language="免责声明"><div class="caption"><span>English note Ⅰ</span></div><code class="language-免责声明">本文整理自网络开放资源，仅用作学习交流，非商用，如侵删！笔记有任何问题可以私信我，会在第一时间改回来的。微信：Chenhaonan_oQQ: 3239676086<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><!-- 来必力City版安装代码 --><div id="lv-container" data-id="city" data-uid="MTAyMC81Njc0OC8zMzIxMg==">    <script type="text/javascript">   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === 'function') { return; }       j = d.createElement(s);       j.src = 'https://cdn-city.livere.com/js/embed.dist.js';       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, 'script');    </script><script> 为正常使用来必力评论功能请激活JavaScript</script></div><!-- City版安装代码已完成 -->  ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;英语名词复数变化&quot;&gt;&lt;a href=&quot;#英语名词复数变化&quot; class=&quot;headerlink&quot; title=&quot;英语名词复数变化&quot;&gt;&lt;/a&gt;英语名词复数变化&lt;/h1&gt;&lt;h2 id=&quot;规则变化&quot;&gt;&lt;a href=&quot;#规则变化&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="English" scheme="http://whoispower.cn/categories/English/"/>
    
    
    <category term="note" scheme="http://whoispower.cn/tags/note/"/>
    
  </entry>
  
</feed>
